{"version":3,"sources":["perfiles.tsx","Container.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","root","width","margin","height","spacing","button","textField","marginLeft","marginRight","card","minWidth","maxWidth","title","fontSize","chartOptions","plotOptions","bar","columnWidth","chart","toolbar","show","dataLabels","enabled","offsetY","style","colors","xaxis","categories","axisBorder","axisTicks","crosshairs","fill","type","gradient","colorFrom","colorTo","stops","opacityFrom","opacityTo","tooltip","formatter","value","shade","shadeIntensity","gradientToColors","undefined","inverseColors","yaxis","seriesName","tickAmount","Perfiles","classes","_useState","useState","_useState2","Object","slicedToArray","lastNumber","setLastNumber","_useState3","_useState4","tasks","setTasks","_useState5","_useState6","numberOfProcessors","setNumberOfProcessors","_useState7","_useState8","hardwareProfile","setHardwareProfile","react_default","a","createElement","Grid","container","direction","justify","alignItems","Typography","variant","align","item","Button","className","color","onClick","pop","toConsumableArray","TextField","id","label","InputLabelProps","shrink","onChange","event","parseInt","currentTarget","concat","alignContent","Card","CardContent","gutterBottom","map","index","key","length","react_apexcharts_min_default","options","objectSpread","text","offsetX","floating","series","name","data","processors","result","forEach","task","push","display","drawer","defineProperty","breakpoints","up","flexShrink","appBar","menuButton","mixins","drawerPaper","content","flexGrow","padding","Container","props","useTheme","_React$useState","React","_React$useState2","mobileOpen","setMobileOpen","_React$useState3","_React$useState4","selectedPage","handleDrawerToggle","Divider","List","ListItem","window","open","selected","ListItemIcon","HelpOutline_default","ListItemText","primary","CssBaseline","AppBar","position","Toolbar","IconButton","aria-label","edge","Menu_default","noWrap","Hidden","smUp","implementation","Drawer","anchor","onClose","paper","ModalProps","keepMounted","xsDown","perfiles_Perfiles","App","react_router_dom","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3e837f5c.chunk.js","sourcesContent":["import {Button, Card, CardContent, createStyles, Grid, makeStyles, Theme, Typography} from \"@material-ui/core\";\nimport React, {useState} from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Chart from \"react-apexcharts\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            width: 700,\n        },\n        margin: {\n            height: theme.spacing(3),\n        },\n        button: {\n            margin: theme.spacing(2),\n        },\n        textField: {\n            marginLeft: theme.spacing(1),\n            marginRight: theme.spacing(1),\n            width: 200,\n        },\n        card: {\n            minWidth: 275,\n            maxWidth: 500\n        },\n        title: {\n            fontSize: 14,\n        },\n    }),\n);\n\nconst chartOptions =  {\n    plotOptions: {\n        bar: {\n            columnWidth: '100%',\n        }\n    },\n    chart: {\n        toolbar: {\n            show: false,\n        },\n    },\n    dataLabels: {\n        enabled: false,\n        offsetY: -20,\n            style: {\n            fontSize: '12px',\n                colors: [\"#304758\"]\n        }\n    },\n    xaxis: {\n        categories: [],\n        axisBorder: {\n            show: true\n        },\n        axisTicks: {\n            show: false,\n        },\n        crosshairs: {\n            fill: {\n                type: 'gradient',\n                    gradient: {\n                    colorFrom: '#D8E3F0',\n                        colorTo: '#BED1E6',\n                        stops: [0, 100],\n                        opacityFrom: 0.4,\n                        opacityTo: 0.5,\n                }\n            }\n        },\n        tooltip: {\n            enabled: true,\n                offsetY: 20,\n            formatter: (value: number) => {return \"Tiempo \" + value},\n        },\n    },\n    fill: {\n        gradient: {\n            shade: 'light',\n                type: \"horizontal\",\n                shadeIntensity: 0.25,\n                gradientToColors: undefined,\n                inverseColors: true,\n                opacityFrom: 1,\n                opacityTo: 1,\n                stops: [50, 0, 100, 100]\n        },\n    },\n    yaxis: {\n        seriesName: \"Cantidad de tareas\",\n        tickAmount: 1,\n        axisBorder: {\n            show: false\n        },\n        axisTicks: {\n            show: false,\n        },\n    },\n};\n\nexport const Perfiles = () => {\n    const classes = useStyles();\n    const [lastNumber, setLastNumber] = useState(0);\n    const [tasks, setTasks] = useState<number[]>([]);\n    const [numberOfProcessors, setNumberOfProcessors] = useState(0);\n    const [hardwareProfile, setHardwareProfile] = useState<number[]>([]);\n\n    function handleChangeTaskTextField(tasks: number) {\n        setLastNumber(tasks);\n    }\n\n    const chartTitleSoftware = {\n        title: {\n            text: \"Perfil de software\",\n            align: 'left',\n            margin: 10,\n            offsetX: 0,\n            offsetY: 0,\n            floating: false,\n            style: {\n                fontSize:  '16px',\n                color:  '#263238'\n            },\n        }\n    };\n\n    const chartTitleHardware = {\n        title: {\n            text: \"Perfil de hardware\",\n            align: 'left',\n            margin: 10,\n            offsetX: 0,\n            offsetY: 0,\n            floating: false,\n            style: {\n                fontSize:  '16px',\n                color:  '#263238'\n            },\n        }\n    };\n\n    function handleNextTime() {\n        if (lastNumber >= 0)\n            setTasks([...tasks, lastNumber]);\n    }\n    \n    function handleLastTime() {\n        tasks.pop();\n        setTasks([...tasks])\n    }\n\n    function handleReset() {\n        setTasks([]);\n        setHardwareProfile([]);\n    }\n\n    function handleChangeProcessors(processors: number) {\n        setNumberOfProcessors(processors);\n    }\n\n    function handleGraphic() {\n        let result: number[] = [];\n        tasks.forEach((task) => {\n            let value = task;\n            while (value > numberOfProcessors) {\n                result.push(numberOfProcessors);\n                value -= numberOfProcessors\n            }\n            result.push(value)\n        });\n        setHardwareProfile(result);\n    }\n\n    return (\n        <Grid\n            spacing={2}\n            container\n            direction=\"column\"\n            justify=\"space-evenly\"\n            alignItems=\"center\"\n        >\n            <Grid container direction={\"column\"}>\n                <Typography variant={\"h4\"} align={\"left\"}>Calcular perfil de hardware</Typography>\n                <Typography variant={\"body1\"} align={\"left\"}>A continuación podrás ingresar los valores del perfil de software para calcular el perfil de hardware correspondiente. Es necesario que ingreses la cantidad de tareas por unidad de tiempo y la cantidad de procesadores.</Typography>\n            </Grid>\n            <Grid container spacing={2} alignItems={\"center\"} direction={\"column\"}>\n                <Grid item><Button className={classes.button} variant={\"contained\"} color={\"primary\"} onClick={handleLastTime}>Anterior t</Button></Grid>\n                <Grid item>\n                    <TextField\n                        id=\"outlined-number\"\n                        label=\"Cantidad de tareas\"\n                        type=\"number\"\n                        className={classes.textField}\n                        InputLabelProps={{\n                            shrink: true,\n                        }}\n                        margin=\"normal\"\n                        variant=\"outlined\"\n                        onChange={(event => handleChangeTaskTextField(parseInt(event.currentTarget.value)))}\n                    />\n                </Grid>\n                <Grid item><Button className={classes.button} variant={\"contained\"} color={\"primary\"} onClick={handleNextTime}>Próximo t</Button></Grid>\n            </Grid>\n            <Grid container spacing={2} direction={\"column\"} alignContent={\"center\"}>\n                <Grid item>\n                    <Card className={classes.card}>\n                        <CardContent>\n                            <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n                                Tareas parciales\n                            </Typography>\n                            {tasks.map((value, index) => (\n                                <Typography key={index}>Tiempo {index+1}, cantidad de tareas: {value}</Typography>\n                            ))}\n                        </CardContent>\n                    </Card>\n                </Grid>\n                <Grid item><Button className={classes.button} variant={\"contained\"} color={\"secondary\"} onClick={handleReset}>Reiniciar</Button></Grid>\n            </Grid>\n            <Grid item>\n                {tasks.length > 0 ? (\n                    <Chart\n                        options={{...chartOptions, ...chartTitleSoftware}}\n                        series={[{name: \"Cantidad de tareas\", data: tasks}]}\n                        type=\"bar\"\n                    />\n                ):null}\n            </Grid>\n            <Grid container spacing={2} direction={\"column\"}>\n                <Grid item>\n                    <TextField\n                        id=\"outlined-number\"\n                        label=\"Cantidad de procesadores\"\n                        type=\"number\"\n                        className={classes.textField}\n                        InputLabelProps={{\n                            shrink: true,\n                        }}\n                        margin=\"normal\"\n                        variant=\"outlined\"\n                        onChange={(event => handleChangeProcessors(parseInt(event.currentTarget.value)))}\n                    />\n                </Grid>\n                <Grid item><Button className={classes.button} variant={\"contained\"} color={\"primary\"} onClick={handleGraphic}>Graficar</Button></Grid>\n            </Grid>\n            <Grid item>\n                {numberOfProcessors > 0 && tasks.length > 0 ? (\n                    <Chart\n                        options={{...chartOptions, ...chartTitleHardware}}\n                        series={[{name: \"Cantidad de tareas\", data: hardwareProfile}]}\n                        type=\"bar\"\n                    />\n                ):null}\n            </Grid>\n        </Grid>\n    );\n};\n","import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Divider from '@material-ui/core/Divider';\nimport Drawer from '@material-ui/core/Drawer';\nimport Hidden from '@material-ui/core/Hidden';\nimport IconButton from '@material-ui/core/IconButton';\nimport List from '@material-ui/core/List';\nimport {ListItem} from '@material-ui/core';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles, useTheme, Theme, createStyles } from '@material-ui/core/styles';\nimport HomeIcon from '@material-ui/icons/Home';\nimport HelpOutlineIcon from '@material-ui/icons/HelpOutline';\nimport AssessmentIcon from '@material-ui/icons/Assessment';\nimport {Redirect, Route, Switch} from \"react-router\";\nimport {Perfiles} from \"./perfiles\";\nimport {Link} from \"react-router-dom\";\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            display: 'flex',\n        },\n        drawer: {\n            [theme.breakpoints.up('sm')]: {\n                width: drawerWidth,\n                flexShrink: 0,\n            },\n        },\n        appBar: {\n            marginLeft: drawerWidth,\n            [theme.breakpoints.up('sm')]: {\n                width: `calc(100% - ${drawerWidth}px)`,\n            },\n        },\n        menuButton: {\n            marginRight: theme.spacing(2),\n            [theme.breakpoints.up('sm')]: {\n                display: 'none',\n            },\n        },\n        toolbar: theme.mixins.toolbar,\n        drawerPaper: {\n            width: drawerWidth,\n        },\n        content: {\n            flexGrow: 1,\n            padding: theme.spacing(3),\n        },\n    }),\n);\n\ninterface ResponsiveDrawerProps {\n    /**\n     * Injected by the documentation to work in an iframe.\n     * You won't need it on your project.\n     */\n    container?: Element;\n}\n\nexport default function Container(props: ResponsiveDrawerProps) {\n    const { container } = props;\n    const classes = useStyles();\n    const theme = useTheme();\n    const [mobileOpen, setMobileOpen] = React.useState(false);\n    const [selectedPage, setSelectedPage] = React.useState(0);\n\n    const handleSelectPage = (index: number) => {\n        setSelectedPage(index);\n    };\n\n    const handleDrawerToggle = () => {\n        setMobileOpen(!mobileOpen);\n    };\n\n    function handleClick() {\n        window.open(\"http://arqui2.alumnos.exa.unicen.edu.ar/\", \"_blank\")\n    }\n\n    const drawer = (\n        <div>\n            <div className={classes.toolbar} />\n            <Divider />\n            <List>\n                <ListItem\n                    button\n                    key={\"Acerca de\"}\n                    onClick={() => handleClick()}\n                    selected={selectedPage === 3}\n                >\n                    <ListItemIcon><HelpOutlineIcon/></ListItemIcon>\n                    <ListItemText primary={\"Página de la cátedra\"}/>\n                </ListItem>\n            </List>\n        </div>\n    );\n\n    return (\n        <div className={classes.root}>\n            <CssBaseline />\n            <AppBar position=\"fixed\" className={classes.appBar}>\n                <Toolbar>\n                    <IconButton\n                        color=\"inherit\"\n                        aria-label=\"open drawer\"\n                        edge=\"start\"\n                        onClick={handleDrawerToggle}\n                        className={classes.menuButton}\n                    >\n                        <MenuIcon />\n                    </IconButton>\n                    <Typography variant=\"h6\" noWrap>\n                        Perfiles de paralelismo\n                    </Typography>\n                </Toolbar>\n            </AppBar>\n            <nav className={classes.drawer} aria-label=\"mailbox folders\">\n                {/* The implementation can be swapped with js to avoid SEO duplication of links. */}\n                <Hidden smUp implementation=\"css\">\n                    <Drawer\n                        container={container}\n                        variant=\"temporary\"\n                        anchor={theme.direction === 'rtl' ? 'right' : 'left'}\n                        open={mobileOpen}\n                        onClose={handleDrawerToggle}\n                        classes={{\n                            paper: classes.drawerPaper,\n                        }}\n                        ModalProps={{\n                            keepMounted: true, // Better open performance on mobile.\n                        }}\n                    >\n                        {drawer}\n                    </Drawer>\n                </Hidden>\n                <Hidden xsDown implementation=\"css\">\n                    <Drawer\n                        classes={{\n                            paper: classes.drawerPaper,\n                        }}\n                        variant=\"permanent\"\n                        open\n                    >\n                        {drawer}\n                    </Drawer>\n                </Hidden>\n            </nav>\n            <main className={classes.content}>\n                <div className={classes.toolbar} />\n                <Perfiles/>\n            </main>\n        </div>\n    );\n}","import React from 'react';\nimport './App.css';\nimport Container from \"./Container\";\nimport {BrowserRouter} from 'react-router-dom'\n\nconst App: React.FC = () => {\n  return (\n      <BrowserRouter>\n    <div className=\"App\">\n      <Container/>\n    </div>\n      </BrowserRouter>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
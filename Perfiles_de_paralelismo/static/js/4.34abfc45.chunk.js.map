{"version":3,"sources":["components/chart-card/index.tsx","components/dialogs/set-processors.tsx","components/profiles/time-card/index.tsx","components/profiles/index.tsx"],"names":["options","chart","toolbar","show","zoom","enabled","plotOptions","bar","horizontal","columnWidth","columnHeight","distributed","dataLabels","markers","size","stroke","curve","lineCap","useStyles","makeStyles","theme","createStyles","root","borderRadius","content","paddingTop","padding","cardActionContainer","display","justifyItems","alignItems","header","backgroundColor","palette","primary","main","height","title","color","common","white","fontSize","fontWeight","lineHeight","downloadButton","avatar","width","spacing","icon","ColumnChart","_ref","categories","series","columnColorFormatter","yAxisFormatter","xAxisFormatter","singleSeriesName","classes","systemTheme","useMediaQuery","downloadElement","element","document","getElementById","concat","html2canvas","then","canvas","toBlob","blob","saveAs","react_default","a","createElement","Card","className","CardHeader","action","Tooltip","IconButton","onClick","GetApp_default","Avatar","aria-label","Assessment_default","CardContent","style","id","react_apexcharts_min_default","Object","objectSpread","mode","xaxis","labels","formatter","fill","colors","undefined","yaxis","tooltip","y","type","ProcessorDialog","open","setOpen","processors","setProcessors","_useState","useState","toString","_useState2","slicedToArray","input","setInput","_useState3","_useState4","error","setError","handleClose","useEffect","parseInt","Dialog","onClose","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogContentText","TextField","fullWidth","helperText","value","label","onChange","event","target","DialogActions","Button","autoFocus","disabled","media","expand","transform","marginLeft","transition","transitions","create","duration","shortest","expandOpen","TimesCard","times","setTimes","_React$useState","React","_React$useState2","expanded","newTimeTasks","setNewTask","_useState5","_useState6","Timeline_default","Typography","variant","component","List","dense","disablePadding","map","item","Collapse","in","Boolean","key","time","unmountOnExit","ListItem","ListItemText","ListItemSecondaryAction","tasks","secondary","length","maxWidth","InputProps","endAdornment","InputAdornment","position","t","toConsumableArray","edge","Add_default","CardActions","disableSpacing","aria-expanded","RotateLeft_default","set_processors","Profiles","processTimes","setProcessTimes","numberOfProcessors","setNumberOfProcessors","hardwareProfile","setHardwareProfile","forEach","push","Grid","container","xs","sm","direction","chart_card","name","data","toFixed","_t","index"],"mappings":"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","file":"static/js/4.34abfc45.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport {\n  Card,\n  CardHeader,\n  CardContent,\n  IconButton,\n  useMediaQuery,\n  Tooltip,\n  Theme,\n  createStyles, \n  Avatar\n} from '@material-ui/core';\nimport ReactApexChart from 'react-apexcharts';\nimport GetAppIcon from '@material-ui/icons/GetApp';\nimport html2canvas from 'html2canvas';\nimport { saveAs } from 'file-saver';\nimport AssessmentIcon from '@material-ui/icons/Assessment';\n\nconst options = {\n  chart: {\n    toolbar: {\n      show: false,\n    },\n    zoom: {\n      enabled: false,\n    },\n  },\n  plotOptions: {\n    bar: {\n      horizontal: false,\n      columnWidth: '100%',\n      columnHeight: '100%',\n      distributed: true,\n    },\n  },\n  dataLabels: {\n    enabled: false,\n  },\n  markers: {\n    size: 2,\n  },\n  stroke: {\n    curve: 'smooth',\n    lineCap: 'round',\n  },\n};\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      borderRadius: 4,\n    },\n    content: {\n      paddingTop: '6px',\n      padding: 16,\n    },\n    cardActionContainer: {\n      display: 'flex',\n      justifyItems: 'center',\n      alignItems: 'flex-end',\n    },\n    header: {\n      backgroundColor: theme.palette.primary.main,\n      height: '64px',\n    },\n    title: {\n      color: theme.palette.common.white,\n      fontSize: '1.25rem',\n      fontWeight: 500,\n      lineHeight: 1.6,\n    },\n    downloadButton: {\n      color: theme.palette.common.white,\n    },\n    avatar: {\n      backgroundColor: theme.palette.common.white,\n      color: theme.palette.primary.main,\n      width: theme.spacing(3),\n      height: theme.spacing(3),\n    },\n    icon: {\n      width: theme.spacing(2),\n      height: theme.spacing(2),\n    }\n  })\n);\n\ninterface ColumnChart {\n  title: string;\n  categories: string[];\n  series: { name: string; data: number[] }[];\n  horizontal: boolean;\n  columnColorFormatter?: ({ value }: any) => string;\n  height?: number;\n  singleSeriesName?: string;\n  yAxisFormatter?: (value: number) => string;\n  xAxisFormatter?: (value: number) => string;\n}\n\nconst ColumnChart = ({\n  title,\n  categories,\n  series,\n  horizontal,\n  columnColorFormatter,\n  yAxisFormatter,\n  xAxisFormatter,\n  height,\n  singleSeriesName,\n}: ColumnChart) => {\n  const classes = useStyles();\n  const systemTheme = useMediaQuery('(prefers-color-scheme: dark)') ? 'dark' : 'light';\n\n  const downloadElement = () => {\n    const element = document.getElementById(`column-chart-${title}`);\n    element &&\n      html2canvas(element).then(function (canvas) {\n        canvas.toBlob(function (blob) {\n          blob && saveAs(blob, `${title}.png`);\n        });\n      });\n  };\n\n  const DownloadButton = () => (\n    <Tooltip title=\"Descargar imágen\">\n      <IconButton onClick={downloadElement} className={classes.downloadButton}>\n        <GetAppIcon />\n      </IconButton>\n    </Tooltip>\n  );\n\n  return (\n    <Card className={classes.root}>\n      <CardHeader\n        className={classes.header}\n        classes={{ title: classes.title }}\n        title={title}\n        action={<DownloadButton />}\n        avatar={\n          <Avatar aria-label=\"time\" className={classes.avatar}>\n            <AssessmentIcon className={classes.icon} />\n          </Avatar>\n        }\n      />\n      <CardContent style={{ paddingTop: 0 }} id={`column-chart-${title}`}>\n        <ReactApexChart\n          options={{\n            ...options,\n            theme: { mode: systemTheme },\n            xaxis: {\n              categories,\n              labels: { formatter: xAxisFormatter },\n            },\n            fill: {\n              colors: columnColorFormatter ? [columnColorFormatter] : undefined,\n            },\n            yaxis: {\n              labels: {\n                formatter: yAxisFormatter,\n              },\n            },\n            plotOptions: {\n              bar: {\n                horizontal: horizontal,\n              },\n            },\n            tooltip: {\n              y: {\n                title: {\n                  formatter: singleSeriesName ? () => singleSeriesName : undefined,\n                },\n                formatter: xAxisFormatter,\n              },\n            },\n          }}\n          series={series}\n          type=\"bar\"\n          height={height || 400}\n        />\n      </CardContent>\n    </Card>\n  );\n};\n\nexport default ColumnChart;\n","import { Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, Button, TextField } from '@material-ui/core';\nimport React, { useEffect, useState } from 'react';\n\ninterface ProcessorDialog {\n  open: boolean;\n  setOpen: (value: boolean) => void;\n  processors: number;\n  setProcessors: Function;\n}\n\nconst ProcessorDialog = ({open, setOpen, processors, setProcessors}: ProcessorDialog) => {\n  const [input, setInput] = useState<string>(processors.toString());\n  const [error, setError] = useState(false);\n  const handleClose = () => {\n    setOpen(false);\n  }\n\n  useEffect(() => {\n    if (input === '' || parseInt(input) <= 0) setError(true);\n    else setError(false);\n  }, [input])\n\n  const handleSetProcessors = () => {\n    setProcessors(parseInt(input));\n    handleClose();\n  }\n\n  return (\n    <Dialog\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogTitle id=\"alert-dialog-title\">{\"Establecer procesadores\"}</DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-description\">\n            Ingresá la cantidad de procesadores.\n          </DialogContentText>\n          <TextField \n            fullWidth \n            error={error}\n            helperText={error && 'Algo tenés que ingresar 😬'}\n            type=\"number\"\n            value={input || ''}\n            label=\"Procesadores\" \n            onChange={(event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setInput(event.target.value)} \n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} color=\"secondary\">\n            Cancelar\n          </Button>\n          <Button onClick={handleSetProcessors} color=\"primary\" autoFocus disabled={error}>\n            Aplicar\n          </Button>\n        </DialogActions>\n      </Dialog>\n  )\n}\n\nexport default ProcessorDialog;\n","import React, { Dispatch, useEffect, useState } from 'react';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardActions from '@material-ui/core/CardActions';\nimport Avatar from '@material-ui/core/Avatar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport { red } from '@material-ui/core/colors';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport AddIcon from '@material-ui/icons/Add';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport TimelineIcon from '@material-ui/icons/Timeline';\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\nimport NavigateBeforeIcon from '@material-ui/icons/NavigateBefore';\nimport RotateLeftIcon from '@material-ui/icons/RotateLeft';\nimport { Button, Collapse, InputAdornment, List, ListItem, ListItemSecondaryAction, ListItemText, OutlinedInput, TextField, Tooltip } from '@material-ui/core';\nimport ProcessorDialog from '../../dialogs/set-processors';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      // maxWidth: 345,\n    },\n    media: {\n      height: 0,\n      paddingTop: '56.25%', // 16:9\n    },\n    expand: {\n      transform: 'rotate(0deg)',\n      marginLeft: 'auto',\n      transition: theme.transitions.create('transform', {\n        duration: theme.transitions.duration.shortest,\n      }),\n    },\n    header: {\n      backgroundColor: theme.palette.primary.main,\n      height: '64px',\n    },\n    title: {\n      color: theme.palette.common.white,\n      fontSize: '1.25rem',\n      fontWeight: 500,\n      lineHeight: 1.6,\n    },\n    expandOpen: {\n      transform: 'rotate(180deg)',\n    },\n    avatar: {\n      backgroundColor: theme.palette.common.white,\n      color: theme.palette.primary.main,\n      width: theme.spacing(3),\n      height: theme.spacing(3),\n    },\n    icon: {\n      width: theme.spacing(2),\n      height: theme.spacing(2),\n    }\n  }),\n);\n\ninterface TimesCard {\n  times: {time: number; tasks: number}[];\n  setTimes: Dispatch<React.SetStateAction<{\n    time: number;\n    tasks: number;\n  }[]>>;\n  processors: number;\n  setProcessors: Dispatch<React.SetStateAction<number>>;\n}\n\nexport default function TimesCard({ times, setTimes, processors, setProcessors }: TimesCard) {\n  const classes = useStyles();\n  const [expanded, setExpanded] = React.useState(false);\n  const [newTimeTasks, setNewTask] = useState('0');\n  const [open, setOpen] = useState(false);\n  const [error, setError] = useState(false);\n\n  useEffect(() => {\n    if (newTimeTasks === '' || parseInt(newTimeTasks) < 0) setError(true);\n    else setError(false);\n  }, [newTimeTasks]);\n\n  const handleExpandClick = () => {\n    setExpanded(!expanded);\n  };\n\n  const handleAddTime = () => {\n    setTimes(t => [...t, { time: t.length + 1, tasks: parseInt(newTimeTasks) } ]);\n    setNewTask('0');\n  }\n\n  return (\n    <Card className={classes.root}>\n      <CardHeader\n        className={classes.header}\n        classes={{ title: classes.title }}\n        avatar={\n          <Avatar aria-label=\"time\" className={classes.avatar}>\n            <TimelineIcon className={classes.icon} />\n          </Avatar>\n        }\n        title=\"Configurar tiempos\"\n      />\n      <CardContent>\n        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n          A continuación podrás ingresar los valores del perfil de software para calcular el perfil de hardware correspondiente. Es necesario que ingreses la cantidad de tareas por unidad de tiempo y la cantidad de procesadores.\n        </Typography>\n        <List dense disablePadding>\n          {times.map(item => (\n            <Collapse in={Boolean(item)} key={`time-${item.time}`} unmountOnExit>\n              <ListItem>\n                <ListItemText primary={`Tiempo ${item.time}`} />\n                <ListItemSecondaryAction>\n                  {`${item.tasks} tareas`}\n                </ListItemSecondaryAction>\n              </ListItem>\n            </Collapse>\n          ))}\n          <ListItem>\n            <ListItemText primary=\"Agregar tareas\" secondary={`Para el tiempo ${times.length + 1}`} />\n            <ListItemSecondaryAction>\n            <TextField\n              id=\"outlined-add\"\n              type=\"number\"\n              error={error}\n              helperText={error && '👎🏼'}\n              style={{ maxWidth: 100 }}\n              value={newTimeTasks.toString()}\n              onChange={(event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => setNewTask(event.target.value)}\n              InputProps={{\n                endAdornment: (\n                  <InputAdornment position=\"end\">\n                    <IconButton\n                      aria-label=\"add new time\"\n                      onClick={handleAddTime}\n                      edge=\"end\"\n                      disabled={error}\n                    >\n                    <AddIcon />\n                  </IconButton>\n                </InputAdornment>\n                )\n              }}\n            />\n            </ListItemSecondaryAction>\n          </ListItem>\n        </List>\n      </CardContent>\n      <CardActions disableSpacing>\n        <Button onClick={() => setOpen(true)}>\n          {processors > 0 ? `Procesadores (${processors})` : \"Establecer procesadores\"}\n        </Button>\n        <Tooltip title=\"Reiniciar\">\n          <IconButton\n            className={classes.expand}\n            onClick={() => setTimes([])}\n            aria-expanded={expanded}\n            aria-label=\"show more\"\n          >\n            <RotateLeftIcon />\n          </IconButton>\n        </Tooltip>\n      </CardActions>\n      <ProcessorDialog open={open} setOpen={setOpen} processors={processors} setProcessors={setProcessors} />\n    </Card>\n  );\n}","import { Grid } from '@material-ui/core';\nimport React, { useEffect, useState } from 'react';\nimport ColumnChart from '../chart-card';\nimport TimesCard from './time-card';\n\nconst Profiles = () => {\n  const [processTimes, setProcessTimes] = useState<{time: number; tasks: number}[]>([]);\n  const [numberOfProcessors, setNumberOfProcessors] = useState(0);\n  const [hardwareProfile, setHardwareProfile] = useState<number[]>([]);\n\n  useEffect(() => {\n    if (numberOfProcessors > 0) {\n      const hardwareProfile: number[] = [];\n      processTimes.forEach(item => {\n        let value = item.tasks\n        while (value > numberOfProcessors) {\n          hardwareProfile.push(numberOfProcessors);\n          value -= numberOfProcessors;\n        }\n        hardwareProfile.push(value);\n      })\n      setHardwareProfile(hardwareProfile)\n    }\n  }, [processTimes, numberOfProcessors]);\n\n  return (\n    <Grid container spacing={1}>\n      <Grid item xs={12} sm={3}>\n        <TimesCard \n          times={processTimes} \n          setTimes={setProcessTimes} \n          processors={numberOfProcessors}\n          setProcessors={setNumberOfProcessors}\n        />\n      </Grid>\n      <Grid item xs={12} sm={9} container direction=\"column\" spacing={1}>\n        <Grid item xs={12}>\n          <ColumnChart \n            categories={processTimes.map(t => `Tiempo ${t.time}`)} \n            title=\"Perfil de Software\" \n            series={[{name: 'Tareas', data: processTimes.map(t => t.tasks)}]} \n            horizontal={false}\n            yAxisFormatter={(value: number) => value.toFixed(0)}\n          />\n        </Grid>\n        <Grid item xs={12}>\n          <ColumnChart \n            categories={hardwareProfile.map((_t, index) => `Tiempo ${index + 1}`)} \n            title=\"Perfil de Hardware\" \n            series={[{name: 'Tareas', data: hardwareProfile}]} \n            horizontal={false} \n            yAxisFormatter={(value: number) => value.toFixed(0)}\n          />\n        </Grid>\n      </Grid>\n    </Grid>\n  )\n};\n\nexport default Profiles;\n"],"sourceRoot":""}
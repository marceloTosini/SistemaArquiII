{"version":3,"sources":["components/modals/formula-viewer/index.tsx","components/result-card/card.tsx","static/images/arithmeticMedian.png","components/result-card/arithmetic.tsx","static/images/geometric.png","components/result-card/geometric.tsx","static/images/weighted.png","components/result-card/weighted.tsx","components/table/table-toolbar.tsx","components/modals/edit-machines/index.tsx","components/modals/edit-benchmarks/index.tsx","components/table/index.tsx","pages/main/index.tsx"],"names":["FormulaViewer","open","setOpen","formulaName","formulaSource","t","useTranslation","handleClose","usesDarkMode","useMediaQuery","FORMULA_TRANSLATION_MAP","arithmeticMedian","geometricMedian","weightedArithmeticMedian","Dialog","fullWidth","onClose","DialogTitle","formula","DialogContent","style","width","background","undefined","alt","src","DialogActions","Button","color","onClick","useStyles","makeStyles","theme","createStyles","header","backgroundColor","palette","primary","main","title","icon","common","white","ResultCard","children","useState","isFormulaModalOpen","setIsFormulaModalOpen","classes","Card","CardHeader","className","Typography","variant","subheader","action","Tooltip","toString","IconButton","prev","chip","margin","spacing","ArithmeticResults","useBenchmarks","machines","getArithmeticMedian","results","map","machineId","value","ArithmeticMedian","CardContent","result","Chip","label","toFixed","row","marginBottom","GeometricResults","getGeometricMedian","geometricFormula","normalizedByMachineId","WeightedResults","getWeightedArithmeticMedian","weightedFormula","weightedByMachineId","useToolbarStyles","root","paddingLeft","paddingRight","borderRadius","flex","actionButton","TableToolbar","isEmpty","actions","Toolbar","id","component","aria-label","handler","disabled","EditMachines","benchmarks","deleteMachine","addMachine","isAddingNewMachine","setIsAddingNewMachine","handleAddMachine","MachineItem","ListItem","ListItemText","ListItemSecondaryAction","handleDeleteMachine","NewMachineInput","TextField","required","name","b","type","onSubmit","event","preventDefault","currentTarget","elements","namedItem","values","benchmark","parseInt","List","Collapse","in","EditBenchmarks","deleteBenchmark","addBenchmark","isAddingNewBenchmark","setIsAddingNewBenchmark","handleAddBenchmark","BenchmarkItem","benchmarkId","handleDeleteBenchmark","NewBenchmarkInput","m","machine","forEach","BenchmarkTable","data","React","anchorEl","setAnchorEl","openEditMachines","setOpenEditMachines","openEditBenchmarks","setOpenEditBenchmarks","handleCloseEditMenu","editMenuOptions","toolbardActions","TableContainer","Paper","Table","TableHead","TableRow","TableCell","align","TableBody","Object","options","MainPage","Grid","container","justify","item","xs","md"],"mappings":"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","file":"static/js/4.a34ca155.chunk.js","sourcesContent":["import {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  useMediaQuery,\n} from '@material-ui/core';\nimport React, { FunctionComponent } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Formula } from '../../../types';\n\ninterface FormulaViewerProps {\n  open: boolean;\n  formulaName: Formula;\n  formulaSource: string;\n  setOpen: (value: boolean) => void;\n}\n\n/**\n * This Formula Viewer is not ideal. There might be a JS library that\n * parses and renders something like LaTEX or some\n * other formula languages out there. Feel free to investigate 🕵🏼‍♂️\n */\nconst FormulaViewer: FunctionComponent<FormulaViewerProps> = ({\n  open,\n  setOpen,\n  formulaName,\n  formulaSource,\n}) => {\n  const { t } = useTranslation();\n  const handleClose = () => setOpen(false);\n  const usesDarkMode = useMediaQuery('(prefers-color-scheme: dark)');\n\n  const FORMULA_TRANSLATION_MAP: { [key in Formula]: string } = {\n    arithmeticMedian: t('formulas.arithmeticMedian'),\n    geometricMedian: t('formulas.geometricMedian'),\n    weightedArithmeticMedian: t('formulas.weightedArithmeticMedian'),\n  };\n\n  return (\n    <Dialog fullWidth open={open} onClose={handleClose}>\n      <DialogTitle>\n        {t('modals.formulaViewer.title', { formula: FORMULA_TRANSLATION_MAP[formulaName] })}\n      </DialogTitle>\n      <DialogContent>\n        <img\n          style={{ width: '100%', background: usesDarkMode ? '#fff' : undefined }}\n          alt={FORMULA_TRANSLATION_MAP[formulaName]}\n          src={formulaSource}\n        />\n      </DialogContent>\n      <DialogActions>\n        <Button color=\"primary\" onClick={handleClose}>\n          OK\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default FormulaViewer;\n","import React, { FunctionComponent, useState } from 'react';\nimport {\n  Card,\n  CardHeader,\n  createStyles,\n  IconButton,\n  makeStyles,\n  Theme,\n  Tooltip,\n  Typography,\n} from '@material-ui/core';\nimport { useTranslation } from 'react-i18next';\nimport FunctionsIcon from '@material-ui/icons/Functions';\nimport FormulaViewer from '../modals/formula-viewer';\nimport { Formula } from '../../types';\n\ninterface ResultCardProps {\n  title: string;\n  formulaName: Formula;\n  formulaSource: string;\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    header: {\n      backgroundColor: theme.palette.primary.main,\n    },\n    title: {\n      color: '#fff',\n    },\n    icon: {\n      color: theme.palette.common.white,\n    },\n  })\n);\n\nconst ResultCard: FunctionComponent<ResultCardProps> = ({\n  title,\n  children,\n  formulaName,\n  formulaSource,\n}) => {\n  const [isFormulaModalOpen, setIsFormulaModalOpen] = useState(false);\n  const classes = useStyles();\n  const { t } = useTranslation();\n\n  const toggleFormulaModal = () => setIsFormulaModalOpen(prev => !prev);\n\n  return (\n    <Card>\n      <CardHeader\n        className={classes.header}\n        title={\n          <Typography className={classes.title} variant=\"h6\">\n            {title}\n          </Typography>\n        }\n        subheader={\n          <Typography variant=\"subtitle1\" className={classes.title}>\n            {t('main.results.subtitle')}\n          </Typography>\n        }\n        action={\n          <Tooltip title={t('main.results.openFormula').toString()}>\n            <IconButton onClick={toggleFormulaModal}>\n              <FunctionsIcon className={classes.icon} />\n            </IconButton>\n          </Tooltip>\n        }\n      />\n      {children}\n      <FormulaViewer\n        open={isFormulaModalOpen}\n        setOpen={setIsFormulaModalOpen}\n        formulaName={formulaName}\n        formulaSource={formulaSource}\n      />\n    </Card>\n  );\n};\n\nexport default ResultCard;\n","export default __webpack_public_path__ + \"static/media/arithmeticMedian.1822f913.png\";","import React from 'react';\nimport { CardContent, Chip, createStyles, makeStyles, Theme } from '@material-ui/core';\nimport { useTranslation } from 'react-i18next';\nimport ResultCard from './card';\nimport { useBenchmarks } from '../../contexts/benchmarks';\nimport ArithmeticMedian from '../../static/images/arithmeticMedian.png';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    chip: {\n      margin: theme.spacing(0.5),\n    },\n  })\n);\n\nconst ArithmeticResults = () => {\n  const classes = useStyles();\n  const { t } = useTranslation();\n  const { machines, getArithmeticMedian } = useBenchmarks();\n\n  const results = machines.map(machineId => ({\n    machineId,\n    value: getArithmeticMedian(machineId),\n  }));\n  return (\n    <ResultCard\n      title={t('main.results.arithmeticMedian')}\n      formulaName=\"arithmeticMedian\"\n      formulaSource={ArithmeticMedian}\n    >\n      <CardContent>\n        {results.map(result => (\n          <Chip\n            key={`benchmark-chip-${result.machineId}`}\n            label={`${result.machineId}: ${result.value.toFixed(2)}`}\n            className={classes.chip}\n          />\n        ))}\n      </CardContent>\n    </ResultCard>\n  );\n};\n\nexport default ArithmeticResults;\n","export default __webpack_public_path__ + \"static/media/geometric.c08a434d.png\";","import React from 'react';\nimport { CardContent, Chip, createStyles, makeStyles, Theme, Typography } from '@material-ui/core';\nimport { useTranslation } from 'react-i18next';\nimport ResultCard from './card';\nimport { useBenchmarks } from '../../contexts/benchmarks';\nimport geometricFormula from '../../static/images/geometric.png';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    chip: {\n      margin: theme.spacing(0.5),\n    },\n    row: {\n      marginBottom: theme.spacing(1),\n    },\n  })\n);\n\nconst GeometricResults = () => {\n  const classes = useStyles();\n  const { t } = useTranslation();\n  const { machines, getGeometricMedian } = useBenchmarks();\n\n  return (\n    <ResultCard\n      title={t('main.results.geometricMedian')}\n      formulaName=\"geometricMedian\"\n      formulaSource={geometricFormula}\n    >\n      <CardContent>\n        {machines.map(normalizedByMachineId => (\n          <div className={classes.row} key={normalizedByMachineId}>\n            <Typography>\n              {t('main.results.geometricSubtitle', { machineId: normalizedByMachineId })}\n            </Typography>\n            {machines.map(machineId => (\n              <Chip\n                className={classes.chip}\n                key={`normalized-by-${normalizedByMachineId}-${machineId}`}\n                label={`${machineId}: ${getGeometricMedian(\n                  machineId,\n                  normalizedByMachineId\n                ).toFixed(2)}`}\n              />\n            ))}\n          </div>\n        ))}\n      </CardContent>\n    </ResultCard>\n  );\n};\n\nexport default GeometricResults;\n","export default __webpack_public_path__ + \"static/media/weighted.06a2cd42.png\";","import React from 'react';\nimport { CardContent, Chip, createStyles, makeStyles, Theme, Typography } from '@material-ui/core';\nimport { useTranslation } from 'react-i18next';\nimport ResultCard from './card';\nimport { useBenchmarks } from '../../contexts/benchmarks';\nimport weightedFormula from '../../static/images/weighted.png';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    chip: {\n      margin: theme.spacing(0.5),\n    },\n    row: {\n      marginBottom: theme.spacing(1),\n    },\n  })\n);\n\nconst WeightedResults = () => {\n  const classes = useStyles();\n  const { t } = useTranslation();\n  const { machines, getWeightedArithmeticMedian } = useBenchmarks();\n\n  return (\n    <ResultCard\n      title={t('main.results.weightedMedian')}\n      formulaName=\"weightedArithmeticMedian\"\n      formulaSource={weightedFormula}\n    >\n      <CardContent>\n        {machines.map(weightedByMachineId => (\n          <div className={classes.row} key={weightedByMachineId}>\n            <Typography>\n              {t('main.results.weightedSubtitle', { machineId: weightedByMachineId })}\n            </Typography>\n            {machines.map(machineId => (\n              <Chip\n                className={classes.chip}\n                key={`weighted-by-${weightedByMachineId}-${machineId}`}\n                label={`${machineId}: ${getWeightedArithmeticMedian(\n                  machineId,\n                  weightedByMachineId\n                ).toFixed(2)}`}\n              />\n            ))}\n          </div>\n        ))}\n      </CardContent>\n    </ResultCard>\n  );\n};\n\nexport default WeightedResults;\n","import React from 'react';\nimport {\n  makeStyles,\n  Theme,\n  createStyles,\n  Typography,\n  Tooltip,\n  IconButton,\n} from '@material-ui/core';\nimport Toolbar from '@material-ui/core/Toolbar';\n\nconst useToolbarStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      paddingLeft: theme.spacing(2),\n      paddingRight: theme.spacing(1),\n      backgroundColor: theme.palette.primary.main,\n      borderRadius: '4px 4px 0px 0px',\n    },\n    title: {\n      flex: '1 1 100%',\n      color: theme.palette.common.white,\n    },\n    actionButton: {\n      color: theme.palette.common.white,\n    },\n  })\n);\n\nexport interface ToolbarAction {\n  title: string;\n  icon: JSX.Element;\n  handler: (event: React.MouseEvent<HTMLButtonElement>) => void;\n}\ninterface Toolbar {\n  isEmpty?: boolean;\n  actions?: ToolbarAction[];\n}\n\nconst TableToolbar = ({ isEmpty, actions }: Toolbar) => {\n  const classes = useToolbarStyles();\n\n  return (\n    <Toolbar className={classes.root} color=\"primary\">\n      <Typography className={classes.title} variant=\"h6\" id=\"tableTitle\" component=\"div\">\n        Benchmarks\n      </Typography>\n      {actions &&\n        actions.map(action => (\n          <Tooltip key={action.title} title={action.title}>\n            <span>\n              <IconButton\n                aria-label={`${action.title} toolbar action`}\n                onClick={action.handler}\n                disabled={isEmpty}\n                className={classes.actionButton}\n              >\n                {action.icon}\n              </IconButton>\n            </span>\n          </Tooltip>\n        ))}\n    </Toolbar>\n  );\n};\n\nexport default TableToolbar;\n","import {\n  Button,\n  Collapse,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  IconButton,\n  List,\n  ListItem,\n  ListItemSecondaryAction,\n  ListItemText,\n  TextField,\n  Tooltip,\n} from '@material-ui/core';\nimport React, { FormEvent, FunctionComponent, useState } from 'react';\nimport { useBenchmarks } from '../../../contexts/benchmarks';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { useTranslation } from 'react-i18next';\n\ninterface EditMachinesProps {\n  open: boolean;\n  setOpen: (value: boolean) => void;\n}\n\ninterface MachineItemProps {\n  machineId: string;\n}\n\nconst EditMachines: FunctionComponent<EditMachinesProps> = ({ open, setOpen }) => {\n  const { machines, benchmarks, deleteMachine, addMachine } = useBenchmarks();\n  const [isAddingNewMachine, setIsAddingNewMachine] = useState(false);\n  const handleClose = () => setOpen(false);\n  const { t } = useTranslation();\n\n  const handleDeleteMachine = (machineId: string) => deleteMachine(machineId);\n  const handleAddMachine = () => setIsAddingNewMachine(true);\n  const handleCancelEditing = () => setIsAddingNewMachine(false);\n  const handleAddNewMachine = (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    const machineId = (event.currentTarget.elements.namedItem('machineID') as HTMLInputElement)\n      .value;\n    const values = benchmarks.map(benchmark =>\n      parseInt((event.currentTarget.elements.namedItem(benchmark.id) as HTMLInputElement).value)\n    );\n    addMachine(machineId, values);\n    setIsAddingNewMachine(false);\n  };\n\n  const MachineItem: FunctionComponent<MachineItemProps> = ({ machineId }) => (\n    <ListItem>\n      <ListItemText>{machineId}</ListItemText>\n      <ListItemSecondaryAction>\n        <Tooltip title=\"Eliminar\">\n          <span>\n            <IconButton\n              disabled={isAddingNewMachine}\n              onClick={() => handleDeleteMachine(machineId)}\n            >\n              <DeleteIcon />\n            </IconButton>\n          </span>\n        </Tooltip>\n      </ListItemSecondaryAction>\n    </ListItem>\n  );\n\n  const NewMachineInput = () => (\n    <>\n      <ListItem>\n        <TextField\n          required\n          id=\"new-machine-name\"\n          name=\"machineID\"\n          label={t('modals.editMachines.newMachineId')}\n        />\n      </ListItem>\n      {benchmarks.map(b => (\n        <ListItem key={`input-machineValue-${b.id}`}>\n          <TextField\n            required\n            fullWidth\n            type=\"number\"\n            name={b.id}\n            label={t('modals.editMachines.valueForBenchmark', { id: b.id })}\n          />\n        </ListItem>\n      ))}\n    </>\n  );\n\n  return (\n    <Dialog fullWidth open={open} onClose={handleClose}>\n      <form onSubmit={handleAddNewMachine}>\n        <DialogTitle>{'Editar Máquinas'}</DialogTitle>\n        <DialogContent>\n          <List>\n            {machines.map(machineId => (\n              <MachineItem key={`listItem-machine-${machineId}`} machineId={machineId} />\n            ))}\n            <Collapse in={isAddingNewMachine}>\n              <NewMachineInput />\n            </Collapse>\n          </List>\n        </DialogContent>\n        <DialogActions>\n          {isAddingNewMachine ? (\n            <>\n              <Button color=\"secondary\" type=\"reset\" onClick={handleCancelEditing}>\n                {t('modals.editMachines.cancelEditing')}\n              </Button>\n              <Button color=\"primary\" type=\"submit\" onClick={handleAddMachine}>\n                {t('modals.editMachines.addNewMachine')}\n              </Button>\n            </>\n          ) : (\n            <>\n              <Button color=\"primary\" onClick={handleAddMachine}>\n                {t('modals.editMachines.addMachine')}\n              </Button>\n              <Button color=\"primary\" onClick={handleClose}>\n                OK\n              </Button>\n            </>\n          )}\n        </DialogActions>\n      </form>\n    </Dialog>\n  );\n};\n\nexport default EditMachines;\n","import {\n  Button,\n  Collapse,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  IconButton,\n  List,\n  ListItem,\n  ListItemSecondaryAction,\n  ListItemText,\n  TextField,\n  Tooltip,\n} from '@material-ui/core';\nimport React, { FormEvent, FunctionComponent, useState } from 'react';\nimport { useBenchmarks } from '../../../contexts/benchmarks';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { BenchmarkValues } from '../../../types';\nimport { useTranslation } from 'react-i18next';\n\ninterface EditBenchmarksProps {\n  open: boolean;\n  setOpen: (value: boolean) => void;\n}\n\ninterface BenchmarkItemProps {\n  benchmarkId: string;\n}\n\nconst EditBenchmarks: FunctionComponent<EditBenchmarksProps> = ({ open, setOpen }) => {\n  const { benchmarks, deleteBenchmark, addBenchmark, machines } = useBenchmarks();\n  const [isAddingNewBenchmark, setIsAddingNewBenchmark] = useState(false);\n  const { t } = useTranslation();\n  const handleClose = () => setOpen(false);\n\n  const handleDeleteBenchmark = (benchmarkId: string) => deleteBenchmark(benchmarkId);\n  const handleAddBenchmark = () => setIsAddingNewBenchmark(true);\n  const handleCancelEditing = () => setIsAddingNewBenchmark(false);\n  const handleAddNewBenchmark = (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    const benchmarkId = (event.currentTarget.elements.namedItem('benchmarkId') as HTMLInputElement)\n      .value;\n    const values: BenchmarkValues = {};\n    machines.forEach(machineId => {\n      values[machineId] = parseInt(\n        (event.currentTarget.elements.namedItem(machineId) as HTMLInputElement).value\n      );\n    });\n    addBenchmark({ id: benchmarkId, values });\n    setIsAddingNewBenchmark(false);\n  };\n\n  const BenchmarkItem: FunctionComponent<BenchmarkItemProps> = ({ benchmarkId }) => (\n    <ListItem>\n      <ListItemText>{benchmarkId}</ListItemText>\n      <ListItemSecondaryAction>\n        <Tooltip title={t('modals.editBenchmarks.deleteBenchmark').toString()}>\n          <span>\n            <IconButton\n              disabled={isAddingNewBenchmark}\n              onClick={() => handleDeleteBenchmark(benchmarkId)}\n            >\n              <DeleteIcon />\n            </IconButton>\n          </span>\n        </Tooltip>\n      </ListItemSecondaryAction>\n    </ListItem>\n  );\n\n  const NewBenchmarkInput = () => (\n    <>\n      <ListItem>\n        <TextField\n          required\n          id=\"new-machine-name\"\n          name=\"benchmarkId\"\n          label={t('modals.editBenchmarks.newBenchmarkId')}\n        />\n      </ListItem>\n      {machines.map(m => (\n        <ListItem key={`input-benchmark-${m}`}>\n          <TextField\n            required\n            fullWidth\n            type=\"number\"\n            name={m}\n            label={t('modals.editBenchmarks.valueForMachine', { machine: m })}\n          />\n        </ListItem>\n      ))}\n    </>\n  );\n\n  return (\n    <Dialog fullWidth open={open} onClose={handleClose}>\n      <form onSubmit={handleAddNewBenchmark}>\n        <DialogTitle>{t('modals.editBenchmarks.title')}</DialogTitle>\n        <DialogContent>\n          <List>\n            {benchmarks.map(benchmark => (\n              <BenchmarkItem\n                key={`listItem-benchmark-${benchmark.id}`}\n                benchmarkId={benchmark.id}\n              />\n            ))}\n            <Collapse in={isAddingNewBenchmark}>\n              <NewBenchmarkInput />\n            </Collapse>\n          </List>\n        </DialogContent>\n        <DialogActions>\n          {isAddingNewBenchmark ? (\n            <>\n              <Button color=\"secondary\" type=\"reset\" onClick={handleCancelEditing}>\n                {t('modals.editBenchmarks.cancelEditing')}\n              </Button>\n              <Button color=\"primary\" type=\"submit\" onClick={handleAddBenchmark}>\n                {t('modals.editBenchmarks.addNewBenchmark')}\n              </Button>\n            </>\n          ) : (\n            <>\n              <Button color=\"primary\" onClick={handleAddBenchmark}>\n                {t('modals.editBenchmarks.addBenchmark')}\n              </Button>\n              <Button color=\"primary\" onClick={handleClose}>\n                OK\n              </Button>\n            </>\n          )}\n        </DialogActions>\n      </form>\n    </Dialog>\n  );\n};\n\nexport default EditBenchmarks;\n","import React, { useState } from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport { Benchmark, Option } from '../../types';\nimport TableToolbar, { ToolbarAction } from './table-toolbar';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport EditMachines from '../modals/edit-machines';\nimport EditBenchmarks from '../modals/edit-benchmarks';\nimport OptionMenu from '../menus/option-menu';\nimport { useTranslation } from 'react-i18next';\n\ninterface TableProps {\n  data: Benchmark[];\n  machines: string[];\n}\n\nexport default function BenchmarkTable({ data, machines }: TableProps) {\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n  const [openEditMachines, setOpenEditMachines] = useState(false);\n  const [openEditBenchmarks, setOpenEditBenchmarks] = useState(false);\n  const { t } = useTranslation();\n\n  const handleCloseEditMenu = () => setAnchorEl(null);\n  const handleOpenEditMachines = () => {\n    setOpenEditMachines(true);\n    handleCloseEditMenu();\n  };\n  const handleOpenEditBenchmarks = () => {\n    setOpenEditBenchmarks(true);\n    handleCloseEditMenu();\n  };\n\n  const handleOpenEditPopover = (event: React.MouseEvent<HTMLButtonElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const editMenuOptions: Option[] = [\n    {\n      label: t('table.optionsMenu.editMahcines'),\n      handler: handleOpenEditMachines,\n      component: 'button',\n    },\n    {\n      label: t('table.optionsMenu.editBenchmarks'),\n      handler: handleOpenEditBenchmarks,\n      component: 'button',\n    },\n  ];\n\n  const toolbardActions: ToolbarAction[] = [\n    { title: t('table.toolbar.edit'), icon: <SettingsIcon />, handler: handleOpenEditPopover },\n  ];\n\n  return (\n    <TableContainer component={Paper}>\n      <TableToolbar actions={toolbardActions} />\n      <Table aria-label=\"simple table\">\n        <TableHead>\n          <TableRow>\n            {machines.map(machine => (\n              <TableCell key={machine} align=\"center\">\n                {machine}\n              </TableCell>\n            ))}\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {data.map(benchmark => (\n            <TableRow key={`benchmark-${benchmark.id}`}>\n              {Object.values(benchmark.values).map(value => (\n                <TableCell key={value} align=\"center\">\n                  {value}\n                </TableCell>\n              ))}\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n      <OptionMenu anchorEl={anchorEl} handleClose={handleCloseEditMenu} options={editMenuOptions} />\n      <EditMachines open={openEditMachines} setOpen={setOpenEditMachines} />\n      <EditBenchmarks open={openEditBenchmarks} setOpen={setOpenEditBenchmarks} />\n    </TableContainer>\n  );\n}\n","import { Grid } from '@material-ui/core';\nimport React from 'react';\nimport { ArithmeticResults, GeometricResults, WeightedResults } from '../../components/result-card';\nimport BenchmarkTable from '../../components/table';\nimport { useBenchmarks } from '../../contexts/benchmarks';\n\nconst MainPage = () => {\n  const { machines, benchmarks } = useBenchmarks();\n\n  return (\n    <Grid container spacing={1} justify=\"space-between\">\n      <Grid item xs={12}>\n        <BenchmarkTable machines={machines} data={benchmarks} />\n      </Grid>\n      <Grid item xs={12} md={4}>\n        <ArithmeticResults />\n      </Grid>\n      <Grid item xs={12} md={4}>\n        <GeometricResults />\n      </Grid>\n      <Grid item xs={12} md={4}>\n        <WeightedResults />\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default MainPage;\n"],"sourceRoot":""}
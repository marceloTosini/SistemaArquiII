{"version":3,"sources":["assets/geometrica.png","assets/media.png","assets/ponderada.png","ResultCard.tsx","Utils.ts","TabsView.tsx","Container.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","useStyles","makeStyles","theme","createStyles","card","minWidth","maxWidth","pos","marginBottom","ResultCard","props","classes","Card","className","CardContent","Typography","variant","component","name","color","results","toFixed","NormalizacionA","data","normalized","JSON","parse","stringify","relacion","forEach","row","mA","mB","mC","NormalizacionB","NormalizacionC","getMediaAritmetica","maquina","result","parseInt","length","getMediaGemetrica","console","log","Math","pow","PonderacionInversa","ponderacion","relation","mediap","localization","body","addTooltip","deleteTooltip","editTooltip","header","actions","pagination","labelRowsSelect","firstTooltip","previousTooltip","nextTooltip","lastTooltip","labelDisplayedRows","TabPanel","children","value","index","other","role","hidden","id","aria-labelledby","Box","p","a11yProps","root","flexGrow","backgroundColor","palette","background","paper","media","height","paddingTop","TabsView","React","useState","setValue","columns","title","field","type","benchmark","state","setState","AppBar","position","Tabs","scrollButtons","onChange","event","newValue","aria-label","Tab","label","Grid","item","xs","sm","CardMedia","image","container","spacing","justify","alignItems","direction","options","search","editable","onRowAdd","newData","Promise","resolve","setTimeout","prevState","push","onRowUpdate","oldData","indexOf","onRowDelete","splice","ponderada","geometrica","display","drawer","breakpoints","up","width","flexShrink","appBar","marginLeft","menuButton","marginRight","toolbar","mixins","drawerPaper","content","padding","Container","useTheme","mobileOpen","setMobileOpen","handleDrawerToggle","Divider","List","ListItem","button","key","onClick","window","open","ListItemIcon","ListItemText","CssBaseline","Toolbar","IconButton","edge","noWrap","Hidden","smUp","implementation","Drawer","anchor","onClose","ModalProps","keepMounted","xsDown","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qIAAAA,EAAOC,QAAU,IAA0B,wC,oBCA3CD,EAAOC,QAAU,IAA0B,mC,oBCA3CD,EAAOC,QAAU,IAA0B,uC,ubCSrCC,EAAYC,aAAW,SAACC,GAAD,OACzBC,YAAa,CACTC,KAAM,CACFC,SAAU,IACVC,SAAU,KAEdC,IAAK,CACDC,aAAc,QA4BXC,EAvBI,SAACC,GAChB,IAAMC,EAAUX,IAChB,OACI,kBAACY,EAAA,EAAD,CAAMC,UAAWF,EAAQP,MACzB,kBAACU,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,UAAU,MAAMP,EAAMQ,MACnD,kBAACH,EAAA,EAAD,CAAYF,UAAWF,EAAQJ,IAAKY,MAAM,iBAA1C,gBACJ,kBAACJ,EAAA,EAAD,CAAYC,QAAQ,QAAQC,UAAU,KACjCP,EAAMU,QAAQ,GAAGC,QAAQ,IAE1B,kBAACN,EAAA,EAAD,CAAYF,UAAWF,EAAQJ,IAAKY,MAAM,iBAA1C,gBACJ,kBAACJ,EAAA,EAAD,CAAYC,QAAQ,QAAQC,UAAU,KACjCP,EAAMU,QAAQ,GAAGC,QAAQ,IAE1B,kBAACN,EAAA,EAAD,CAAYF,UAAWF,EAAQJ,IAAKY,MAAM,iBAA1C,gBACJ,kBAACJ,EAAA,EAAD,CAAYC,QAAQ,QAAQC,UAAU,KACjCP,EAAMU,QAAQ,GAAGC,QAAQ,O,kBCnC3B,SAASC,EAAeC,GAC3B,IAAIC,EAAoBC,KAAKC,MAAMD,KAAKE,UAAUJ,IAC9CK,EAAW,EAOf,OANAJ,EAAWK,SAAQ,SAAAC,GACfF,EAAWE,EAAIC,GAAK,IACpBD,EAAIC,GAAK,IACTD,EAAIE,GAAKF,EAAIE,GAAKJ,EAClBE,EAAIG,GAAKH,EAAIG,GAAKL,KAEfJ,EAGJ,SAASU,EAAeX,GAC3B,IAAIC,EAAoBC,KAAKC,MAAMD,KAAKE,UAAUJ,IAC9CK,EAAW,EAOf,OANAJ,EAAWK,SAAQ,SAAAC,GACfF,EAAWE,EAAIE,GAAK,IACpBF,EAAIC,GAAKD,EAAIC,GAAKH,EAClBE,EAAIE,GAAK,IACTF,EAAIG,GAAKH,EAAIG,GAAKL,KAEfJ,EAGJ,SAASW,EAAeZ,GAC3B,IAAIC,EAAoBC,KAAKC,MAAMD,KAAKE,UAAUJ,IAC9CK,EAAW,EAOf,OANAJ,EAAWK,SAAQ,SAAAC,GACfF,EAAWE,EAAIG,GAAK,IACpBH,EAAIC,GAAKD,EAAIC,GAAKH,EAClBE,EAAIE,GAAKF,EAAIE,GAAKJ,EAClBE,EAAIG,GAAK,OAENT,EAGJ,SAASY,EAAmBb,EAAac,GAC5C,IAAIC,EAAS,EAMb,OALAf,EAAKM,SAAQ,SAAAC,GAAG,OAEZQ,GAAUC,SAAST,EAAIO,GAAU,OAErCC,GAAkBf,EAAKiB,OAIpB,SAASC,EAAkBlB,EAAac,GAC3C,IAAIC,EAAS,EAOb,OANAf,EAAKM,SAAQ,SAAAC,GAAG,OAEZQ,GAAkBC,SAAST,EAAIO,GAAU,OAE7CK,QAAQC,IAAIpB,EAAKiB,QACjBF,EAAUM,KAAKC,IAAIP,EAAQ,EAAEf,EAAKiB,QAI/B,SAASM,EAAmBvB,EAAac,EAAiBU,GAC7D,IAAIT,EAAS,EACTU,EAAW,EACXC,EAAS,EAWb,OAVA1B,EAAKM,SAAQ,SAAAC,GAETQ,GAAkB,EAAIR,EAAIiB,MAE9BxB,EAAKM,SAAQ,SAAAC,GAETkB,EAAY,EAAKV,GAAY,EAAIR,EAAIiB,IAErCE,GAAkBD,EAAWlB,EAAIO,MAE9BY,E,onBC/BX,IAAMC,GAAe,CACjBC,KAAM,CACFC,WAAY,UACZC,cAAe,SACfC,YAAa,UAEjBC,OAAQ,CACJC,QAAS,YAEbC,WAAY,CACRC,gBAAiB,QACjBC,aAAc,mBACdC,gBAAiB,qBACjBC,YAAa,sBACbC,YAAa,sBACbC,mBAAoB,2BAI5B,SAASC,GAAStD,GAAuB,IAC7BuD,EAAqCvD,EAArCuD,SAAUC,EAA2BxD,EAA3BwD,MAAOC,EAAoBzD,EAApByD,MAAUC,EADC,YACS1D,EADT,8BAGpC,OACI,kBAACK,EAAA,EAAD,eACIE,UAAU,MACVoD,KAAK,WACLC,OAAQJ,IAAUC,EAClBI,GAAE,0BAAqBJ,GACvBK,kBAAA,qBAA+BL,IAC3BC,GAEHF,IAAUC,GAAS,kBAACM,EAAA,EAAD,CAAKC,EAAG,GAAIT,IAK5C,SAASU,GAAUR,GACf,MAAO,CACHI,GAAG,cAAD,OAAgBJ,GAClB,gBAAgB,mBAAhB,OAAoCA,IAI5C,IAAMnE,GAAYC,aAAW,SAACC,GAAD,MAAmB,CAC5C0E,KAAM,CACFC,SAAU,EACVC,gBAAiB5E,EAAM6E,QAAQC,WAAWC,OAE9C7E,KAAM,CACFE,SAAU,KAEd4E,MAAO,CACHC,OAAQ,EACRC,WAAY,cAIL,SAASC,KACpB,IAAM1E,EAAUX,KADe,EAELsF,IAAMC,SAAS,GAFV,mBAExBrB,EAFwB,KAEjBsB,EAFiB,OAGLF,IAAMC,SAAqB,CACjDE,QAAS,CACL,CAAEC,MAAO,YAAaC,MAAO,YAAaC,KAAM,WAChD,CAAEF,MAAO,eAAaC,MAAO,KAAMC,KAAM,WACzC,CAAEF,MAAO,eAAaC,MAAO,KAAMC,KAAM,WACzC,CAAEF,MAAO,eAAaC,MAAO,KAAMC,KAAM,YAE7CrE,KAAM,CACF,CAAEsE,UAAW,IAAK9D,GAAI,IAAMC,GAAI,GAAIC,GAAI,KACxC,CAAE4D,UAAW,IAAK9D,GAAI,IAAMC,GAAI,IAAKC,GAAI,IACzC,CAAE4D,UAAW,IAAK9D,GAAI,IAAMC,GAAI,IAAKC,GAAI,KACzC,CAAE4D,UAAW,IAAK9D,GAAI,IAAMC,GAAI,IAAKC,GAAI,QAdlB,mBAGxB6D,EAHwB,KAGjBC,EAHiB,KAwB/B,OACI,yBAAKlF,UAAWF,EAAQiE,MACpB,kBAACoB,EAAA,EAAD,CAAQC,SAAS,UACb,kBAACC,EAAA,EAAD,CACIlF,QAAQ,aACRmF,cAAc,OACdjC,MAAOA,EACPkC,SAbK,SAACC,EAA8BC,GAChDd,EAASc,IAaGC,aAAW,uBAEX,kBAACC,EAAA,EAAD,eAAKC,MAAM,uBAAuB9B,GAAU,KAC5C,kBAAC6B,EAAA,EAAD,eAAKC,MAAM,iCAAiC9B,GAAU,KACtD,kBAAC6B,EAAA,EAAD,eAAKC,MAAM,uBAAuB9B,GAAU,OAGpD,kBAACX,GAAD,CAAUE,MAAOA,EAAOC,MAAO,GAC/B,kBAACuC,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,GAAI,GACf,kBAACjG,EAAA,EAAD,CAAMC,UAAWF,EAAQP,MACrB,kBAAC0G,EAAA,EAAD,CAAWjG,UAAWF,EAAQuE,MAAO6B,MAAO7B,QAGpD,kBAACwB,EAAA,EAAD,CACIM,WAAS,EACTC,QAAS,EACTC,QAAQ,gBACRC,WAAW,SACXC,UAAW,OAEX,kBAACV,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,IACX,kBAAC,IAAD,CACIlB,MAAM,wBACND,QAASK,EAAML,QACflE,KAAMuE,EAAMvE,KACZ2B,aAAcA,GACdmE,QAAS,CAACC,QAAQ,GAClBC,SAAU,CACNC,SAAU,SAAAC,GAAO,OACb,IAAIC,SAAQ,SAAAC,GACRC,YAAW,WACPD,IACA5B,GAAS,SAAA8B,GACL,IAAMtG,EAAI,YAAOsG,EAAUtG,MAE3B,OADAA,EAAKuG,KAAKL,GACH,GAAP,GAAYI,EAAZ,CAAuBtG,cAE5B,SAEXwG,YAAa,SAACN,EAASO,GAAV,OACT,IAAIN,SAAQ,SAAAC,GACRC,YAAW,WACPD,IACIK,GACAjC,GAAS,SAAA8B,GACL,IAAMtG,EAAI,YAAOsG,EAAUtG,MAE3B,OADAA,EAAKA,EAAK0G,QAAQD,IAAYP,EACvB,GAAP,GAAYI,EAAZ,CAAuBtG,cAGhC,SAEX2G,YAAa,SAAAF,GAAO,OAChB,IAAIN,SAAQ,SAAAC,GACRC,YAAW,WACPD,IACA5B,GAAS,SAAA8B,GACL,IAAMtG,EAAI,YAAOsG,EAAUtG,MAE3B,OADAA,EAAK4G,OAAO5G,EAAK0G,QAAQD,GAAU,GAC5B,GAAP,GAAYH,EAAZ,CAAuBtG,cAE5B,aAKvB,kBAACmF,EAAA,EAAD,CAAMC,MAAI,GACN,kBAAC,EAAD,CAAYzF,KAAM,mBAAoBE,QAAS,CAACgB,EAAmB0D,EAAMvE,KAAK,MAAOa,EAAmB0D,EAAMvE,KAAK,MAAOa,EAAmB0D,EAAMvE,KAAK,YAIpK,kBAACyC,GAAD,CAAUE,MAAOA,EAAOC,MAAO,GAC/B,kBAACuC,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,GAAI,GACf,kBAACjG,EAAA,EAAD,CAAMC,UAAWF,EAAQP,MACrB,kBAAC0G,EAAA,EAAD,CAAWjG,UAAWF,EAAQuE,MAAO6B,MAAOqB,QAGpD,kBAAC1B,EAAA,EAAD,CACIM,WAAS,EACTC,QAAS,EACTC,QAAQ,gBACRC,WAAW,SACXC,UAAW,OAEX,kBAACV,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,IACX,kBAAC,IAAD,CACIlB,MAAM,wBACND,QAASK,EAAML,QACflE,KAAMuE,EAAMvE,KACZ2B,aAAcA,GACdmE,QAAS,CAACC,QAAQ,GAClBC,SAAU,CACNC,SAAU,SAAAC,GAAO,OACb,IAAIC,SAAQ,SAAAC,GACRC,YAAW,WACPD,IACA5B,GAAS,SAAA8B,GACL,IAAMtG,EAAI,YAAOsG,EAAUtG,MAE3B,OADAA,EAAKuG,KAAKL,GACH,GAAP,GAAYI,EAAZ,CAAuBtG,cAE5B,SAEXwG,YAAa,SAACN,EAASO,GAAV,OACT,IAAIN,SAAQ,SAAAC,GACRC,YAAW,WACPD,IACIK,GACAjC,GAAS,SAAA8B,GACL,IAAMtG,EAAI,YAAOsG,EAAUtG,MAE3B,OADAA,EAAKA,EAAK0G,QAAQD,IAAYP,EACvB,GAAP,GAAYI,EAAZ,CAAuBtG,cAGhC,SAEX2G,YAAa,SAAAF,GAAO,OAChB,IAAIN,SAAQ,SAAAC,GACRC,YAAW,WACPD,IACA5B,GAAS,SAAA8B,GACL,IAAMtG,EAAI,YAAOsG,EAAUtG,MAE3B,OADAA,EAAK4G,OAAO5G,EAAK0G,QAAQD,GAAU,GAC5B,GAAP,GAAYH,EAAZ,CAAuBtG,cAE5B,aAKvB,kBAACmF,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,EAAGC,GAAI,GAClB,kBAAC,EAAD,CACI3F,KAAM,0FACNE,QAAS,CAAC0B,EAAmBgD,EAAMvE,KAAM,KAAM,MAAOuB,EAAmBgD,EAAMvE,KAAM,KAAM,MAAOuB,EAAmBgD,EAAMvE,KAAM,KAAM,UAG/I,kBAACmF,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,EAAGC,GAAI,GAClB,kBAAC,EAAD,CACI3F,KAAM,0FACNE,QAAS,CAAC0B,EAAmBgD,EAAMvE,KAAM,KAAM,MAAOuB,EAAmBgD,EAAMvE,KAAM,KAAM,MAAOuB,EAAmBgD,EAAMvE,KAAM,KAAM,UAG/I,kBAACmF,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,EAAGC,GAAI,GAClB,kBAAC,EAAD,CACI3F,KAAM,0FACNE,QAAS,CAAC0B,EAAmBgD,EAAMvE,KAAM,KAAM,MAAOuB,EAAmBgD,EAAMvE,KAAM,KAAM,MAAOuB,EAAmBgD,EAAMvE,KAAM,KAAM,YAMvJ,kBAACyC,GAAD,CAAUE,MAAOA,EAAOC,MAAO,GAC3B,kBAACuC,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,GAAI,GACnB,kBAACjG,EAAA,EAAD,CAAMC,UAAWF,EAAQP,MACrB,kBAAC0G,EAAA,EAAD,CAAWjG,UAAWF,EAAQuE,MAAO6B,MAAOsB,QAGpD,kBAAC3B,EAAA,EAAD,CACIM,WAAS,EACTC,QAAS,EACTC,QAAQ,gBACRC,WAAW,SACXC,UAAW,OAEX,kBAACV,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,IACX,kBAAC,IAAD,CACIlB,MAAM,wBACND,QAASK,EAAML,QACflE,KAAMuE,EAAMvE,KACZ2B,aAAcA,GACdmE,QAAS,CAACC,QAAQ,GAClBC,SAAU,CACNC,SAAU,SAAAC,GAAO,OACb,IAAIC,SAAQ,SAAAC,GACRC,YAAW,WACPD,IACA5B,GAAS,SAAA8B,GACL,IAAMtG,EAAI,YAAOsG,EAAUtG,MAE3B,OADAA,EAAKuG,KAAKL,GACH,GAAP,GAAYI,EAAZ,CAAuBtG,cAE5B,SAEXwG,YAAa,SAACN,EAASO,GAAV,OACT,IAAIN,SAAQ,SAAAC,GACRC,YAAW,WACPD,IACIK,GACAjC,GAAS,SAAA8B,GACL,IAAMtG,EAAI,YAAOsG,EAAUtG,MAE3B,OADAA,EAAKA,EAAK0G,QAAQD,IAAYP,EACvB,GAAP,GAAYI,EAAZ,CAAuBtG,cAGhC,SAEX2G,YAAa,SAAAF,GAAO,OAChB,IAAIN,SAAQ,SAAAC,GACRC,YAAW,WACPD,IACA5B,GAAS,SAAA8B,GACL,IAAMtG,EAAI,YAAOsG,EAAUtG,MAE3B,OADAA,EAAK4G,OAAO5G,EAAK0G,QAAQD,GAAU,GAC5B,GAAP,GAAYH,EAAZ,CAAuBtG,cAE5B,aAKvB,kBAACmF,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,IACX,kBAAC,IAAD,CACIlB,MAAM,gDACND,QAASK,EAAML,QACfvC,aAAcA,GACd3B,KAAMD,EAAewE,EAAMvE,MAC3B8F,QAAS,CAACC,QAAQ,MAG1B,kBAACZ,EAAA,EAAD,CAAMC,MAAI,GACN,kBAAC,EAAD,CAAYzF,KAAM,qDAAgDE,QAAS,CAACqB,EAAkBnB,EAAewE,EAAMvE,MAAM,MAAOkB,EAAkBnB,EAAewE,EAAMvE,MAAM,MAAOkB,EAAkBnB,EAAewE,EAAMvE,MAAM,UAErO,kBAACmF,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,IACX,kBAAC,IAAD,CACIlB,MAAM,gDACND,QAASK,EAAML,QACfvC,aAAcA,GACd3B,KAAMW,EAAe4D,EAAMvE,MAC3B8F,QAAS,CAACC,QAAQ,MAG1B,kBAACZ,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,GACX,kBAAC,EAAD,CAAY1F,KAAM,qDAAgDE,QAAS,CAACqB,EAAkBP,EAAe4D,EAAMvE,MAAM,MAAOkB,EAAkBP,EAAe4D,EAAMvE,MAAM,MAAOkB,EAAkBP,EAAe4D,EAAMvE,MAAM,UAErO,kBAACmF,EAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,IACX,kBAAC,IAAD,CACIlB,MAAM,gDACND,QAASK,EAAML,QACfvC,aAAcA,GACd3B,KAAMY,EAAe2D,EAAMvE,MAC3B8F,QAAS,CAACC,QAAQ,MAG1B,kBAACZ,EAAA,EAAD,CAAMC,MAAI,GACN,kBAAC,EAAD,CAAYzF,KAAM,qDAAgDE,QAAS,CAACqB,EAAkBN,EAAe2D,EAAMvE,MAAM,MAAOkB,EAAkBN,EAAe2D,EAAMvE,MAAM,MAAOkB,EAAkBN,EAAe2D,EAAMvE,MAAM,aCjWzP,IAEMvB,GAAYC,aAAW,SAACC,GAAD,OACzBC,YAAa,CACTyE,KAAM,CACF0D,QAAS,QAEbC,OAAO,eACFrI,EAAMsI,YAAYC,GAAG,MAAQ,CAC1BC,MATI,IAUJC,WAAY,IAGpBC,OAAO,eACF1I,EAAMsI,YAAYC,GAAG,MAAQ,CAC1BC,MAAM,eAAD,OAfD,IAeC,OACLG,WAhBI,MAmBZC,WAAW,aACPC,YAAa7I,EAAM+G,QAAQ,IAC1B/G,EAAMsI,YAAYC,GAAG,MAAQ,CAC1BH,QAAS,SAGjBU,QAAS9I,EAAM+I,OAAOD,QACtBE,YAAa,CACTR,MA3BQ,KA6BZS,QAAS,CACLtE,SAAU,EACVuE,QAASlJ,EAAM+G,QAAQ,SAapB,SAASoC,GAAU3I,GAA+B,IACrDsG,EAActG,EAAdsG,UACFrG,EAAUX,KACVE,EAAQoJ,cAH8C,EAIxBhE,IAAMC,UAAS,GAJS,mBAIrDgE,EAJqD,KAIzCC,EAJyC,KAMtDC,EAAqB,WACvBD,GAAeD,IAOnB,IAAMhB,EACF,6BACI,yBAAK1H,UAAWF,EAAQqI,UACxB,kBAACU,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAUC,QAAM,EAACC,IAAK,UAAWC,QAT7C,WACIC,OAAOC,KAAK,2CAA4C,YAS5C,kBAACC,EAAA,EAAD,KAAc,kBAAC,IAAD,OACd,kBAACC,EAAA,EAAD,sCAMhB,OACI,yBAAKtJ,UAAWF,EAAQiE,MACpB,kBAACwF,EAAA,EAAD,MACA,kBAACpE,EAAA,EAAD,CAAQC,SAAS,QAAQpF,UAAWF,EAAQiI,QACxC,kBAACyB,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CACInJ,MAAM,UACNoF,aAAW,cACXgE,KAAK,QACLR,QAASN,EACT5I,UAAWF,EAAQmI,YAEnB,kBAAC,IAAD,OAEJ,kBAAC/H,EAAA,EAAD,CAAYC,QAAQ,KAAKwJ,QAAM,GAA/B,gCAKR,yBAAK3J,UAAWF,EAAQ4H,OAAQhC,aAAW,mBAEvC,kBAACkE,EAAA,EAAD,CAAQC,MAAI,EAACC,eAAe,OACxB,kBAACC,EAAA,EAAD,CACI5D,UAAWA,EACXhG,QAAQ,YACR6J,OAA4B,QAApB3K,EAAMkH,UAAsB,QAAU,OAC9C6C,KAAMV,EACNuB,QAASrB,EACT9I,QAAS,CACLsE,MAAOtE,EAAQuI,aAEnB6B,WAAY,CACRC,aAAa,IAGhBzC,IAGT,kBAACkC,EAAA,EAAD,CAAQQ,QAAM,EAACN,eAAe,OAC1B,kBAACC,EAAA,EAAD,CACIjK,QAAS,CACLsE,MAAOtE,EAAQuI,aAEnBlI,QAAQ,YACRiJ,MAAI,GAEH1B,KAIb,0BAAM1H,UAAWF,EAAQwI,SACrB,yBAAKtI,UAAWF,EAAQqI,UACxB,kBAAC3D,GAAD,Q,cCpID6F,GARO,WACpB,OACI,kBAAC,KAAD,KACE,kBAAC7B,GAAD,QCIY8B,QACW,cAA7BnB,OAAOoB,SAASC,UAEe,UAA7BrB,OAAOoB,SAASC,UAEhBrB,OAAOoB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,GAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.70f18d3e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/geometrica.ae04fc6e.png\";","module.exports = __webpack_public_path__ + \"static/media/media.59ee354d.png\";","module.exports = __webpack_public_path__ + \"static/media/ponderada.c9804043.png\";","import Card from \"@material-ui/core/Card\";\nimport {CardContent, createStyles, makeStyles, Theme, Typography} from \"@material-ui/core\";\nimport React from \"react\";\n\ninterface CardInterface {\n    name: string,\n    results: number[]\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        card: {\n            minWidth: 275,\n            maxWidth: 500\n        },\n        pos: {\n            marginBottom: 5,\n        },\n    }),\n);\n\nconst ResultCard = (props: CardInterface) => {\n    const classes = useStyles();\n    return (\n        <Card className={classes.card}>\n        <CardContent>\n            <Typography variant=\"h5\" component=\"h2\">{props.name}</Typography>\n        <Typography className={classes.pos} color=\"textSecondary\">Máquina A</Typography>\n    <Typography variant=\"body2\" component=\"p\">\n        {props.results[0].toFixed(3)}\n        </Typography>\n        <Typography className={classes.pos} color=\"textSecondary\">Máquina B</Typography>\n    <Typography variant=\"body2\" component=\"p\">\n        {props.results[1].toFixed(3)}\n        </Typography>\n        <Typography className={classes.pos} color=\"textSecondary\">Máquina C</Typography>\n    <Typography variant=\"body2\" component=\"p\">\n        {props.results[2].toFixed(3)}\n        </Typography>\n        </CardContent>\n        </Card>\n)\n};\n\nexport default ResultCard;","import {Row} from \"./TabsView\";\n\nexport function NormalizacionA(data: Row[]) {\n    let normalized: Row[] = JSON.parse(JSON.stringify(data));\n    let relacion = 1;\n    normalized.forEach(row => {\n        relacion = row.mA / 100;\n        row.mA = 100;\n        row.mB = row.mB / relacion;\n        row.mC = row.mC / relacion;\n    });\n    return normalized;\n}\n\nexport function NormalizacionB(data: Row[]) {\n    let normalized: Row[] = JSON.parse(JSON.stringify(data));\n    let relacion = 1;\n    normalized.forEach(row => {\n        relacion = row.mB / 100;\n        row.mA = row.mA / relacion\n        row.mB = 100;\n        row.mC = row.mC / relacion;\n    });\n    return normalized;\n}\n\nexport function NormalizacionC(data: Row[]) {\n    let normalized: Row[] = JSON.parse(JSON.stringify(data));\n    let relacion = 1;\n    normalized.forEach(row => {\n        relacion = row.mC / 100;\n        row.mA = row.mA / relacion;\n        row.mB = row.mB / relacion;\n        row.mC = 100;\n    });\n    return normalized;\n}\n\nexport function getMediaAritmetica(data: Row[], maquina: string) {\n    let result = 0;\n    data.forEach(row => (\n        // @ts-ignore\n        result += parseInt(row[maquina], 10)\n    ));\n    result = result / data.length;\n    return result\n}\n\nexport function getMediaGemetrica(data: Row[], maquina: string) {\n    let result = 1;\n    data.forEach(row => (\n        // @ts-ignore\n        result = result * parseInt(row[maquina], 10)\n    ));\n    console.log(data.length)\n    result =  Math.pow(result, 1/data.length);\n    return result\n}\n\nexport function PonderacionInversa(data: Row[], maquina: string, ponderacion: string){\n    let result = 0;\n    let relation = 0;\n    let mediap = 0;\n    data.forEach(row => {\n        // @ts-ignore\n        result = result + 1 / row[ponderacion];\n    });\n    data.forEach(row => {\n        // @ts-ignore\n        relation = (1 / (result)) * (1 / row[ponderacion]);\n        //@ts-ignore\n        mediap = mediap + relation * row[maquina];\n    });\n    return mediap;\n}","import React from 'react';\nimport { makeStyles, Theme } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport MaterialTable, {Column} from \"material-table\";\nimport ResultCard from \"./ResultCard\";\nimport {Grid, CardMedia} from \"@material-ui/core\";\nimport {\n    getMediaAritmetica,\n    getMediaGemetrica,\n    NormalizacionA,\n    NormalizacionB,\n    NormalizacionC,\n    PonderacionInversa\n} from \"./Utils\";\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport geometrica from \"./assets/geometrica.png\"\nimport media from \"./assets/media.png\"\nimport ponderada from \"./assets/ponderada.png\"\n\ninterface TabPanelProps {\n    children?: React.ReactNode;\n    index: any;\n    value: any;\n}\n\nexport interface Row {\n    benchmark: string\n    mA: number,\n    mB: number,\n    mC: number,\n}\n\ninterface TableState {\n    columns: Array<Column<Row>>;\n    data: Row[];\n}\n\nconst localization = {\n    body: {\n        addTooltip: 'Agregar',\n        deleteTooltip: \"Borrar\",\n        editTooltip: \"Editar\"\n    },\n    header: {\n        actions: 'Acciones',\n    },\n    pagination: {\n        labelRowsSelect: 'filas',\n        firstTooltip: \"Primer página\",\n        previousTooltip: \"Página anterior\",\n        nextTooltip: \"Página siguiente\",\n        lastTooltip: \"Última página\",\n        labelDisplayedRows: \"{from}-{to} de {count}\"\n    }\n};\n\nfunction TabPanel(props: TabPanelProps) {\n    const { children, value, index, ...other } = props;\n\n    return (\n        <Typography\n            component=\"div\"\n            role=\"tabpanel\"\n            hidden={value !== index}\n            id={`simple-tabpanel-${index}`}\n            aria-labelledby={`simple-tab-${index}`}\n            {...other}\n        >\n            {value === index && <Box p={3}>{children}</Box>}\n        </Typography>\n    );\n}\n\nfunction a11yProps(index: any) {\n    return {\n        id: `simple-tab-${index}`,\n        'aria-controls': `simple-tabpanel-${index}`,\n    };\n}\n\nconst useStyles = makeStyles((theme: Theme) => ({\n    root: {\n        flexGrow: 1,\n        backgroundColor: theme.palette.background.paper,\n    },\n    card: {\n        maxWidth: 345,\n    },\n    media: {\n        height: 0,\n        paddingTop: '56.25%', // 16:9\n      },\n}));\n\nexport default function TabsView() {\n    const classes = useStyles();\n    const [value, setValue] = React.useState(0);\n    const [state, setState] = React.useState<TableState>({\n        columns: [\n            { title: \"Benchmark\", field: \"benchmark\", type: \"numeric\"},\n            { title: 'Máquina A', field: 'mA', type: \"numeric\" },\n            { title: 'Máquina B', field: 'mB', type: \"numeric\" },\n            { title: 'Máquina C', field: 'mC', type: \"numeric\" },\n        ],\n        data: [\n            { benchmark: \"1\", mA: 100,  mB: 50, mC: 150},\n            { benchmark: \"2\", mA: 200,  mB: 150, mC: 50},\n            { benchmark: \"3\", mA: 400,  mB: 700, mC: 400},\n            { benchmark: \"4\", mA: 800,  mB: 800, mC: 700},\n        ],\n    });\n\n    const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\n        setValue(newValue);\n    };\n\n\n\n    return (\n        <div className={classes.root}>\n            <AppBar position=\"static\">\n                <Tabs\n                    variant=\"scrollable\"\n                    scrollButtons=\"auto\"\n                    value={value} \n                    onChange={handleChange} \n                    aria-label=\"simple tabs example\"\n                >\n                    <Tab label=\"Media Aritmética\" {...a11yProps(0)} />\n                    <Tab label=\"Media Aritmética Ponderada\" {...a11yProps(1)} />\n                    <Tab label=\"Media Geométrica\" {...a11yProps(2)} />\n                </Tabs>\n            </AppBar>\n            <TabPanel value={value} index={0}>\n            <Grid item xs={12} sm={6}>\n                    <Card className={classes.card}>\n                        <CardMedia className={classes.media} image={media}/>\n                    </Card>\n                </Grid>\n                <Grid\n                    container\n                    spacing={3}\n                    justify=\"space-between\"\n                    alignItems=\"center\"\n                    direction={\"row\"}\n                >\n                    <Grid item xs={12}>\n                        <MaterialTable\n                            title=\"Listado de benchmarks\"\n                            columns={state.columns}\n                            data={state.data}\n                            localization={localization}\n                            options={{search: false}}\n                            editable={{\n                                onRowAdd: newData =>\n                                    new Promise(resolve => {\n                                        setTimeout(() => {\n                                            resolve();\n                                            setState(prevState => {\n                                                const data = [...prevState.data];\n                                                data.push(newData);\n                                                return { ...prevState, data };\n                                            });\n                                        }, 600);\n                                    }),\n                                onRowUpdate: (newData, oldData) =>\n                                    new Promise(resolve => {\n                                        setTimeout(() => {\n                                            resolve();\n                                            if (oldData) {\n                                                setState(prevState => {\n                                                    const data = [...prevState.data];\n                                                    data[data.indexOf(oldData)] = newData;\n                                                    return { ...prevState, data };\n                                                });\n                                            }\n                                        }, 600);\n                                    }),\n                                onRowDelete: oldData =>\n                                    new Promise(resolve => {\n                                        setTimeout(() => {\n                                            resolve();\n                                            setState(prevState => {\n                                                const data = [...prevState.data];\n                                                data.splice(data.indexOf(oldData), 1);\n                                                return { ...prevState, data };\n                                            });\n                                        }, 600);\n                                    }),\n                            }}\n                        />\n                    </Grid>\n                    <Grid item>\n                        <ResultCard name={\"Media Aritmetica\"} results={[getMediaAritmetica(state.data,\"mA\"), getMediaAritmetica(state.data,\"mB\"), getMediaAritmetica(state.data,\"mC\")]}/>\n                    </Grid>\n                </Grid>\n            </TabPanel>\n            <TabPanel value={value} index={1}>\n            <Grid item xs={12} sm={6}>\n                    <Card className={classes.card}>\n                        <CardMedia className={classes.media} image={ponderada}/>\n                    </Card>\n                </Grid>\n                <Grid\n                    container\n                    spacing={3}\n                    justify=\"space-between\"\n                    alignItems=\"center\"\n                    direction={\"row\"}\n                >\n                    <Grid item xs={12}>\n                        <MaterialTable\n                            title=\"Listado de benchmarks\"\n                            columns={state.columns}\n                            data={state.data}\n                            localization={localization}\n                            options={{search: false}}\n                            editable={{\n                                onRowAdd: newData =>\n                                    new Promise(resolve => {\n                                        setTimeout(() => {\n                                            resolve();\n                                            setState(prevState => {\n                                                const data = [...prevState.data];\n                                                data.push(newData);\n                                                return { ...prevState, data };\n                                            });\n                                        }, 600);\n                                    }),\n                                onRowUpdate: (newData, oldData) =>\n                                    new Promise(resolve => {\n                                        setTimeout(() => {\n                                            resolve();\n                                            if (oldData) {\n                                                setState(prevState => {\n                                                    const data = [...prevState.data];\n                                                    data[data.indexOf(oldData)] = newData;\n                                                    return { ...prevState, data };\n                                                });\n                                            }\n                                        }, 600);\n                                    }),\n                                onRowDelete: oldData =>\n                                    new Promise(resolve => {\n                                        setTimeout(() => {\n                                            resolve();\n                                            setState(prevState => {\n                                                const data = [...prevState.data];\n                                                data.splice(data.indexOf(oldData), 1);\n                                                return { ...prevState, data };\n                                            });\n                                        }, 600);\n                                    }),\n                            }}\n                        />\n                    </Grid>\n                    <Grid item xs={6} sm={3}>\n                        <ResultCard\n                            name={\"Media Aritmetica Ponderada por el inverso de tiempos de ejecución de la máquina A\"}\n                            results={[PonderacionInversa(state.data, \"mA\", \"mA\"), PonderacionInversa(state.data, \"mB\", \"mA\"), PonderacionInversa(state.data, \"mC\", \"mA\")]}\n                        />\n                    </Grid>\n                    <Grid item xs={6} sm={3}>\n                        <ResultCard\n                            name={\"Media Aritmetica Ponderada por el inverso de tiempos de ejecución de la máquina B\"}\n                            results={[PonderacionInversa(state.data, \"mA\", \"mB\"), PonderacionInversa(state.data, \"mB\", \"mB\"), PonderacionInversa(state.data, \"mC\", \"mB\")]}\n                        />\n                    </Grid>\n                    <Grid item xs={6} sm={3}>\n                        <ResultCard\n                            name={\"Media Aritmetica Ponderada por el inverso de tiempos de ejecución de la máquina C\"}\n                            results={[PonderacionInversa(state.data, \"mA\", \"mC\"), PonderacionInversa(state.data, \"mB\", \"mC\"), PonderacionInversa(state.data, \"mC\", \"mC\")]}\n                        />\n                    </Grid>\n\n                </Grid>\n            </TabPanel>\n            <TabPanel value={value} index={2}>\n                <Grid item xs={12} sm={6}>\n                    <Card className={classes.card}>\n                        <CardMedia className={classes.media} image={geometrica}/>\n                    </Card>\n                </Grid>\n                <Grid\n                    container\n                    spacing={3}\n                    justify=\"space-between\"\n                    alignItems=\"center\"\n                    direction={\"row\"}\n                >\n                    <Grid item xs={12}>\n                        <MaterialTable\n                            title=\"Listado de benchmarks\"\n                            columns={state.columns}\n                            data={state.data}\n                            localization={localization}\n                            options={{search: false}}\n                            editable={{\n                                onRowAdd: newData =>\n                                    new Promise(resolve => {\n                                        setTimeout(() => {\n                                            resolve();\n                                            setState(prevState => {\n                                                const data = [...prevState.data];\n                                                data.push(newData);\n                                                return { ...prevState, data };\n                                            });\n                                        }, 600);\n                                    }),\n                                onRowUpdate: (newData, oldData) =>\n                                    new Promise(resolve => {\n                                        setTimeout(() => {\n                                            resolve();\n                                            if (oldData) {\n                                                setState(prevState => {\n                                                    const data = [...prevState.data];\n                                                    data[data.indexOf(oldData)] = newData;\n                                                    return { ...prevState, data };\n                                                });\n                                            }\n                                        }, 600);\n                                    }),\n                                onRowDelete: oldData =>\n                                    new Promise(resolve => {\n                                        setTimeout(() => {\n                                            resolve();\n                                            setState(prevState => {\n                                                const data = [...prevState.data];\n                                                data.splice(data.indexOf(oldData), 1);\n                                                return { ...prevState, data };\n                                            });\n                                        }, 600);\n                                    }),\n                            }}\n                        />\n                    </Grid>\n                    <Grid item xs={12}>\n                        <MaterialTable\n                            title=\"Benchmarks normalizados según máquina A\"\n                            columns={state.columns}\n                            localization={localization}\n                            data={NormalizacionA(state.data)}\n                            options={{search: false}}\n                        />\n                    </Grid>\n                    <Grid item>\n                        <ResultCard name={\"Media Geometrica Normalizada según máquina A\"} results={[getMediaGemetrica(NormalizacionA(state.data),\"mA\"), getMediaGemetrica(NormalizacionA(state.data),\"mB\"), getMediaGemetrica(NormalizacionA(state.data),\"mC\")]}/>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <MaterialTable\n                            title=\"Benchmarks normalizados según máquina B\"\n                            columns={state.columns}\n                            localization={localization}\n                            data={NormalizacionB(state.data)}\n                            options={{search: false}}\n                        />\n                    </Grid>\n                    <Grid item xs={6}>\n                        <ResultCard name={\"Media Geometrica Normalizada según máquina B\"} results={[getMediaGemetrica(NormalizacionB(state.data),\"mA\"), getMediaGemetrica(NormalizacionB(state.data),\"mB\"), getMediaGemetrica(NormalizacionB(state.data),\"mC\")]}/>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <MaterialTable\n                            title=\"Benchmarks normalizados según máquina C\"\n                            columns={state.columns}\n                            localization={localization}\n                            data={NormalizacionC(state.data)}\n                            options={{search: false}}\n                        />\n                    </Grid>\n                    <Grid item>\n                        <ResultCard name={\"Media Geometrica Normalizada según máquina C\"} results={[getMediaGemetrica(NormalizacionC(state.data),\"mA\"), getMediaGemetrica(NormalizacionC(state.data),\"mB\"), getMediaGemetrica(NormalizacionC(state.data),\"mC\")]}/>\n                    </Grid>\n                </Grid>\n            </TabPanel>\n        </div>\n    );\n}","import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Divider from '@material-ui/core/Divider';\nimport Drawer from '@material-ui/core/Drawer';\nimport Hidden from '@material-ui/core/Hidden';\nimport IconButton from '@material-ui/core/IconButton';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles, useTheme, Theme, createStyles } from '@material-ui/core/styles';\nimport {BenchMark} from \"./BenchmarksPage\";\nimport AssessmentIcon from '@material-ui/icons/Assessment';\nimport SchoolIcon from '@material-ui/icons/School';\nimport {Redirect, Route, Switch} from \"react-router\";\nimport {Link} from \"react-router-dom\";\nimport MenuIcon from '@material-ui/icons/Menu';\nimport TabsView from \"./TabsView\";\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            display: 'flex',\n        },\n        drawer: {\n            [theme.breakpoints.up('sm')]: {\n                width: drawerWidth,\n                flexShrink: 0,\n            },\n        },\n        appBar: {\n            [theme.breakpoints.up('sm')]: {\n                width: `calc(100% - ${drawerWidth}px)`,\n                marginLeft: drawerWidth,\n            },\n        },\n        menuButton: {\n            marginRight: theme.spacing(2),\n            [theme.breakpoints.up('sm')]: {\n                display: 'none',\n            },\n        },\n        toolbar: theme.mixins.toolbar,\n        drawerPaper: {\n            width: drawerWidth,\n        },\n        content: {\n            flexGrow: 1,\n            padding: theme.spacing(3),\n        },\n    }),\n);\n\ninterface ResponsiveDrawerProps {\n    /**\n     * Injected by the documentation to work in an iframe.\n     * You won't need it on your project.\n     */\n    container?: Element;\n}\n\nexport default function Container(props: ResponsiveDrawerProps) {\n    const { container } = props;\n    const classes = useStyles();\n    const theme = useTheme();\n    const [mobileOpen, setMobileOpen] = React.useState(false);\n\n    const handleDrawerToggle = () => {\n        setMobileOpen(!mobileOpen);\n    };\n\n    function handleClick() {\n        window.open(\"http://arqui2.alumnos.exa.unicen.edu.ar/\", \"_blank\")\n    }\n\n    const drawer = (\n        <div>\n            <div className={classes.toolbar} />\n            <Divider />\n            <List>\n                <ListItem button key={\"catedra\"} onClick={handleClick}>\n                    <ListItemIcon><SchoolIcon/></ListItemIcon>\n                    <ListItemText>Página de la cátedra</ListItemText>\n                </ListItem>\n            </List>\n        </div>\n    );\n\n    return (\n        <div className={classes.root}>\n            <CssBaseline />\n            <AppBar position=\"fixed\" className={classes.appBar}>\n                <Toolbar>\n                    <IconButton\n                        color=\"inherit\"\n                        aria-label=\"open drawer\"\n                        edge=\"start\"\n                        onClick={handleDrawerToggle}\n                        className={classes.menuButton}\n                    >\n                        <MenuIcon />\n                    </IconButton>\n                    <Typography variant=\"h6\" noWrap>\n                        Benchmarks de procesadores\n                    </Typography>\n                </Toolbar>\n            </AppBar>\n            <nav className={classes.drawer} aria-label=\"mailbox folders\">\n                {/* The implementation can be swapped with js to avoid SEO duplication of links. */}\n                <Hidden smUp implementation=\"css\">\n                    <Drawer\n                        container={container}\n                        variant=\"temporary\"\n                        anchor={theme.direction === 'rtl' ? 'right' : 'left'}\n                        open={mobileOpen}\n                        onClose={handleDrawerToggle}\n                        classes={{\n                            paper: classes.drawerPaper,\n                        }}\n                        ModalProps={{\n                            keepMounted: true, // Better open performance on mobile.\n                        }}\n                    >\n                        {drawer}\n                    </Drawer>\n                </Hidden>\n                <Hidden xsDown implementation=\"css\">\n                    <Drawer\n                        classes={{\n                            paper: classes.drawerPaper,\n                        }}\n                        variant=\"permanent\"\n                        open\n                    >\n                        {drawer}\n                    </Drawer>\n                </Hidden>\n            </nav>\n            <main className={classes.content}>\n                <div className={classes.toolbar} />\n                <TabsView/>\n            </main>\n        </div>\n    );\n}","import React from 'react';\nimport './App.css';\nimport Container from \"./Container\";\nimport {BrowserRouter} from 'react-router-dom'\n\nconst App: React.FC = () => {\n  return (\n      <BrowserRouter>\n        <Container/>\n      </BrowserRouter>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
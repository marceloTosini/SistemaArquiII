{"version":3,"sources":["serviceWorkerRegistration.ts","reportWebVitals.ts","components/modals/about/index.tsx","components/app-shell/header/index.tsx","components/app-shell/router/index.tsx","components/app-shell/index.tsx","i18n.ts","index.tsx","contexts/benchmarks.tsx","components/menus/option-menu/index.tsx"],"names":["Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","About","open","setOpen","t","useTranslation","handleClose","Dialog","fullWidth","onClose","DialogTitle","DialogContent","Typography","DialogActions","Button","color","onClick","href","useStyles","makeStyles","theme","createStyles","menuButton","marginLeft","spacing","appBar","zIndex","drawer","title","flexGrow","icon","palette","common","white","Header","classes","useState","anchorEl","setAnchorEl","openAbout","setOpenAbout","menuOptions","label","component","handler","AppBar","className","Toolbar","variant","noWrap","Tooltip","toString","IconButton","event","currentTarget","options","MainPage","lazy","ContentRouter","fallback","CircularProgress","size","path","to","toolbar","mixins","root","display","content","padding","AppShell","CssBaseline","i18n","use","LanguageDetector","initReactI18next","init","resources","es","translation","en","supportedLngs","fallbackLng","nsSeparator","debug","interpolation","escapeValue","formatSeparator","react","wait","WrappedApp","prefersDarkMode","useMediaQuery","useMemo","createMuiTheme","primary","main","type","ReactDOM","render","StrictMode","I18nextProvider","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message","initialState","machines","benchmarks","id","values","addBenchmark","newBenchmark","deleteBenchmark","benchmarkId","addMachine","machineId","deleteMachine","getArithmeticMedian","forMachine","getGeometricMedian","getWeightedArithmeticMedian","weightedBy","BenchmarksContext","createContext","BenchmarksProvider","children","setBenchmarks","setMachines","Provider","value","benchs","filter","b","map","benchmark","index","machine","filteredValues","forEach","length","normalizedBy","normalizedBenchmarks","push","find","normalized","relation","Object","keys","key","normalizeBenchmark","result","Math","pow","weight","useBenchmarks","useContext","OptionMenu","keepMounted","option"],"mappings":"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","file":"static/js/main.97f23a1b.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {\n  Button,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogTitle,\n  Typography,\n} from '@material-ui/core';\nimport React, { FunctionComponent } from 'react';\nimport { useTranslation } from 'react-i18next';\n\ninterface AboutProps {\n  open: boolean;\n  setOpen: (value: boolean) => void;\n}\n\nconst About: FunctionComponent<AboutProps> = ({ open, setOpen }) => {\n  const { t } = useTranslation();\n  const handleClose = () => setOpen(false);\n\n  return (\n    <Dialog fullWidth open={open} onClose={handleClose}>\n      <DialogTitle>{t('modals.about.title')}</DialogTitle>\n      <DialogContent>\n        <Typography>{t('modals.about.body')}</Typography>\n      </DialogContent>\n      <DialogActions>\n        <Button\n          color=\"primary\"\n          onClick={handleClose}\n          href=\"https://github.com/reloadedhead/performance-comparator\"\n        >\n          {t('modals.about.repo')}\n        </Button>\n        <Button color=\"primary\" onClick={handleClose}>\n          OK\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nexport default About;\n","import React, { useState } from 'react';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport { useTranslation } from 'react-i18next';\nimport { IconButton, Tooltip } from '@material-ui/core';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport { Option } from '../../../types';\nimport OptionMenu from '../../menus/option-menu';\nimport About from '../../modals/about';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    menuButton: {\n      marginLeft: theme.spacing(2),\n    },\n    appBar: {\n      zIndex: theme.zIndex.drawer + 1,\n    },\n    title: {\n      flexGrow: 1,\n    },\n    icon: {\n      color: theme.palette.common.white,\n    },\n  })\n);\n\nconst Header = () => {\n  const classes = useStyles();\n  const { t } = useTranslation();\n  const [anchorEl, setAnchorEl] = useState<HTMLElement | null>(null);\n  const [openAbout, setOpenAbout] = useState(false);\n\n  const handleOpenMenu = (event: React.MouseEvent<HTMLButtonElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleOpenAbout = () => {\n    setOpenAbout(true);\n    setAnchorEl(null);\n  };\n\n  const handleCloseMenu = () => setAnchorEl(null);\n\n  const menuOptions: Option[] = [\n    {\n      label: t('header.menu.class'),\n      href: 'http://arqui2.alumnos.exa.unicen.edu.ar/',\n      component: 'a',\n    },\n    {\n      label: t('header.menu.bugReport'),\n      component: 'a',\n      href: 'mailto:martinmenchon@gmail.com',\n    },\n    {\n      label: t('header.menu.about'),\n      component: 'button',\n      handler: handleOpenAbout,\n    },\n  ];\n\n  return (\n    <AppBar className={classes.appBar}>\n      <Toolbar>\n        <Typography variant=\"h6\" noWrap className={classes.title}>\n          {t('header.title')}\n        </Typography>\n        <Tooltip title={t('header.moreMenu').toString()}>\n          <IconButton onClick={handleOpenMenu}>\n            <MoreVertIcon className={classes.icon} />\n          </IconButton>\n        </Tooltip>\n      </Toolbar>\n      <OptionMenu anchorEl={anchorEl} handleClose={handleCloseMenu} options={menuOptions} />\n      <About open={openAbout} setOpen={setOpenAbout} />\n    </AppBar>\n  );\n};\n\nexport default Header;\n","import React, { lazy, Suspense } from 'react';\nimport { CircularProgress } from '@material-ui/core';\nimport { Redirect, Route, Switch } from 'react-router-dom';\nimport { BenchmarksProvider } from '../../../contexts/benchmarks';\n\nconst MainPage = lazy(() => import('../../../pages/main'));\n\nconst ContentRouter = () => (\n  <Suspense fallback={<CircularProgress size={32} />}>\n    <BenchmarksProvider>\n      <Switch>\n        <Route path=\"/\" component={MainPage} />\n        <Redirect to=\"/\" />\n      </Switch>\n    </BenchmarksProvider>\n  </Suspense>\n);\n\nexport default ContentRouter;\n","import { makeStyles, Theme, createStyles, CssBaseline, Toolbar } from '@material-ui/core';\nimport React from 'react';\nimport Header from './header';\nimport ContentRouter from './router';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    toolbar: theme.mixins.toolbar,\n    root: {\n      display: 'flex',\n    },\n    content: {\n      flexGrow: 1,\n      padding: theme.spacing(3),\n    },\n  })\n);\n\nconst AppShell = () => {\n  const classes = useStyles();\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <Header />\n      <main className={classes.content}>\n        <Toolbar />\n        <ContentRouter />\n      </main>\n    </div>\n  );\n};\n\nexport default AppShell;\n","import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\nimport es from './static/locales/es-AR.json';\nimport en from './static/locales/en-US.json';\nimport LanguageDetector from 'i18next-browser-languagedetector';\n\ni18n\n  .use(LanguageDetector)\n  .use(initReactI18next)\n  .init({\n    resources: {\n      es: {\n        translation: es,\n      },\n      en: {\n        translation: en,\n      },\n    },\n    supportedLngs: ['es', 'en'],\n    fallbackLng: 'es',\n    nsSeparator: '.',\n    debug: false,\n    interpolation: {\n      escapeValue: false,\n      formatSeparator: ',',\n    },\n    react: {\n      wait: true,\n    },\n  });\n\nexport default i18n;\n","import React, { useMemo } from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\nimport { useMediaQuery, createMuiTheme, MuiThemeProvider } from '@material-ui/core';\nimport AppShell from './components/app-shell';\nimport { I18nextProvider } from 'react-i18next';\nimport i18n from './i18n';\nimport { BrowserRouter } from 'react-router-dom';\n\nconst WrappedApp = () => {\n  const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)');\n  const theme = useMemo(\n    () =>\n      createMuiTheme({\n        palette: {\n          primary: {\n            main: '#183F6D',\n          },\n          type: prefersDarkMode ? 'dark' : 'light',\n        },\n      }),\n    [prefersDarkMode]\n  );\n\n  return (\n    <MuiThemeProvider theme={theme}>\n      <BrowserRouter>\n        <AppShell />\n      </BrowserRouter>\n    </MuiThemeProvider>\n  );\n};\n\nReactDOM.render(\n  <React.StrictMode>\n    <I18nextProvider i18n={i18n}>\n      <WrappedApp />\n    </I18nextProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-empty-function */\nimport React, { createContext, ReactNode, useContext, useState } from 'react';\nimport { Benchmark } from '../types';\n\ninterface BenchmarksContext {\n  benchmarks: Benchmark[];\n  machines: string[];\n  addBenchmark: (newBenchmark: Benchmark) => void;\n  deleteBenchmark: (benchmarkId: string) => void;\n  deleteMachine: (machineId: string) => void;\n  addMachine: (machineId: string, values: number[]) => void;\n  getArithmeticMedian: (forMachine: string) => number;\n  getGeometricMedian: (forMachine: string, normalizedBy: string) => number;\n  getWeightedArithmeticMedian: (forMachine: string, weightedBy: string) => number;\n}\n\nconst initialState: BenchmarksContext = {\n  machines: ['Máquina A', 'Máquina B', 'Máquina C'],\n  benchmarks: [\n    { id: 'Benchmark 1', values: { 'Máquina A': 100, 'Máquina B': 150, 'Máquina C': 300 } },\n    { id: 'Benchmark 2', values: { 'Máquina A': 200, 'Máquina B': 450, 'Máquina C': 50 } },\n    { id: 'Benchmark 3', values: { 'Máquina A': 400, 'Máquina B': 50, 'Máquina C': 250 } },\n    { id: 'Benchmark 4', values: { 'Máquina A': 800, 'Máquina B': 50, 'Máquina C': 250 } },\n  ],\n  addBenchmark: (newBenchmark: Benchmark) => {},\n  deleteBenchmark: (benchmarkId: string) => {},\n  addMachine: (machineId: string, values: number[]) => {},\n  deleteMachine: (machineId: string) => {},\n  getArithmeticMedian: (forMachine: string) => 0,\n  getGeometricMedian: (forMachine: string) => 0,\n  getWeightedArithmeticMedian: (forMachine: string, weightedBy: string) => 0,\n};\n\nconst BenchmarksContext = createContext(initialState);\n\nexport const BenchmarksProvider = ({ children }: { children: ReactNode }) => {\n  const [benchmarks, setBenchmarks] = useState<Benchmark[]>(initialState.benchmarks);\n  const [machines, setMachines] = useState<string[]>(initialState.machines);\n\n  const addBenchmark = (newBenchmark: Benchmark) =>\n    setBenchmarks(benchs => [...benchs, newBenchmark]);\n\n  const deleteBenchmark = (benchmarkId: string) =>\n    setBenchmarks(benchs => [...benchs.filter(b => b.id !== benchmarkId)]);\n\n  const addMachine = (machineId: string, values: number[]) => {\n    setMachines(machines => [...machines, machineId]);\n    setBenchmarks(benchmarks =>\n      benchmarks.map((benchmark, index) => ({\n        id: benchmark.id,\n        values: { ...benchmark.values, [machineId]: values[index] },\n      }))\n    );\n  };\n\n  const deleteMachine = (machineId: string) => {\n    setMachines(machines => machines.filter(machine => machine !== machineId));\n    setBenchmarks(benchmarks =>\n      benchmarks.map(benchmark => {\n        const { [machineId]: _, ...filteredValues } = benchmark.values;\n        return { id: benchmark.id, values: filteredValues };\n      })\n    );\n  };\n\n  const normalizeBenchmark = (benchmarkId: string, machineId: string) => {\n    const values = { ...benchmarks.find(b => b.id === benchmarkId)?.values };\n    const normalized = { id: benchmarkId, values };\n    let relation = 1;\n    Object.keys(values)\n      .filter(key => key !== machineId)\n      .forEach(machine => {\n        relation = values[machineId] / 100;\n        normalized.values[machine] = normalized.values[machine] / relation;\n      });\n    normalized.values[machineId] = 100;\n    return normalized;\n  };\n\n  const getArithmeticMedian = (forMachine: string) => {\n    let value = 0;\n    benchmarks.forEach(b => (value += b.values[forMachine]));\n    return benchmarks.length > 0 ? value / benchmarks.length : 0;\n  };\n\n  const getGeometricMedian = (forMachine: string, normalizedBy: string) => {\n    const normalizedBenchmarks: Benchmark[] = [];\n    benchmarks.forEach(benchmark => {\n      normalizedBenchmarks.push(normalizeBenchmark(benchmark.id, normalizedBy));\n    });\n\n    let result = 1;\n    normalizedBenchmarks.forEach(b => {\n      result = result * b.values[forMachine];\n    });\n\n    return Math.pow(result, 1 / benchmarks.length);\n  };\n\n  const getWeightedArithmeticMedian = (forMachine: string, weightedBy: string) => {\n    let weight = 0;\n    let relation = 0;\n    let result = 0;\n    benchmarks.forEach(b => (weight = weight + 1 / b.values[weightedBy]));\n\n    benchmarks.forEach(b => {\n      relation = (1 / weight) * (1 / b.values[weightedBy]);\n      result = result + relation * b.values[forMachine];\n    });\n\n    return result;\n  };\n\n  return (\n    <BenchmarksContext.Provider\n      value={{\n        benchmarks,\n        machines,\n        addBenchmark,\n        deleteBenchmark,\n        addMachine,\n        deleteMachine,\n        getArithmeticMedian,\n        getGeometricMedian,\n        getWeightedArithmeticMedian,\n      }}\n    >\n      {children}\n    </BenchmarksContext.Provider>\n  );\n};\n\nexport const useBenchmarks = () => useContext(BenchmarksContext);\n","import React, { FunctionComponent } from 'react';\nimport { Menu, MenuItem } from '@material-ui/core';\nimport { Option } from '../../../types';\n\ninterface OptionMenuProps {\n  anchorEl: null | HTMLElement;\n  handleClose: () => void;\n  options: Option[];\n}\n\nconst OptionMenu: FunctionComponent<OptionMenuProps> = ({ anchorEl, handleClose, options }) => {\n  return (\n    <Menu\n      id=\"simple-menu\"\n      anchorEl={anchorEl}\n      keepMounted\n      open={Boolean(anchorEl)}\n      onClose={handleClose}\n    >\n      {options.map(option => (\n        <MenuItem\n          component={option.component}\n          key={option.label}\n          onClick={option.handler}\n          href={option.href}\n        >\n          {option.label}\n        </MenuItem>\n      ))}\n    </Menu>\n  );\n};\n\nexport default OptionMenu;\n"],"sourceRoot":""}